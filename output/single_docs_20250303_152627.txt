[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.jax.sharding', 'description': 'Module containing functions for sharding arrays across devices.', 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'get_named_sharding_from_shape', 'description': 'Creates a NamedSharding object for distributing an array across devices.', 'signature': 'get_named_sharding_from_shape(shape: tuple[int, ...], sharding_axis: int) -> jax.sharding.NamedSharding', 'parameters': [{'name': 'shape', 'type': 'tuple[int, ...]', 'docs_id': 3, 'description': 'Shape of the array to be sharded', 'default_value': None, 'is_optional': False}, {'name': 'sharding_axis', 'type': 'int', 'docs_id': 4, 'description': 'Which axis to shard the array along', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/#fdtdx.core.jax.sharding.get_named_sharding_from_shape', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'get_dtype_bytes', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/#fdtdx.core.jax.sharding.get_dtype_bytes', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'pretty_print_sharding', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/#fdtdx.core.jax.sharding.pretty_print_sharding', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'create_named_sharded_matrix', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/#fdtdx.core.jax.sharding.create_named_sharded_matrix', 'error': False}, {'id': 6, 'docs_id': 8, 'type': 'example', 'code': 'def get_named_sharding_from_shape(\n  shape: tuple[int, ...],\n  sharding_axis: int,\n) -> jax.sharding.NamedSharding:\n  """Creates a NamedSharding object for distributing an array across devices.\n  Args:\n    shape: Shape of the array to be sharded\n    sharding_axis: Which axis to shard the array along\n  Returns:\n    NamedSharding object specifying how to distribute the array across available devices\n  Raises:\n    ValueError: If shape[sharding_axis] is not divisible by number of devices\n  """\n  compute_devices = jax.devices()\n  num_dims = len(shape)\n  device_shape = (len(compute_devices),)\n  axis_names = tuple(SHARD_STR if i == sharding_axis else None for i in range(num_dims))\n  devices = mesh_utils.create_device_mesh(\n    device_shape,\n    devices=compute_devices,\n  )\n  mesh = jax.sharding.Mesh(devices=devices, axis_names=(SHARD_STR,))\n  spec = jax.sharding.PartitionSpec(*axis_names)\n  sharding = jax.sharding.NamedSharding(mesh=mesh, spec=spec)\n  return sharding', 'description': 'Example implementation of get_named_sharding_from_shape function', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.jax.sharding', 'description': None, 'url': None, 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'get_dtype_bytes', 'description': 'Get the size in bytes of a JAX dtype.', 'signature': 'get_dtype_bytes(dtype: jnp.dtype) -> int', 'parameters': [{'name': 'dtype', 'type': 'jnp.dtype', 'docs_id': 3, 'description': 'JAX dtype to get size of', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/#fdtdx.core.jax.sharding.get_dtype_bytes', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'pretty_print_sharding', 'description': 'Returns a human-readable string representation of a sharding specification.', 'signature': 'pretty_print_sharding(sharding: jax.sharding.Sharding) -> str', 'parameters': [{'name': 'sharding', 'type': 'jax.sharding.Sharding', 'docs_id': 5, 'description': 'JAX sharding object to format', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/#fdtdx.core.jax.sharding.pretty_print_sharding', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'create_named_sharded_matrix', 'description': 'Creates a sharded matrix distributed across available devices. Creates a matrix of the given shape filled with the specified value, sharded across available devices along the specified axis.', 'signature': 'create_named_sharded_matrix(shape: tuple[int, ...], value: float, sharding_axis: int, dtype: jnp.dtype, backend: Literal["gpu", "tpu", "cpu"]) -> jax.Array', 'parameters': [{'name': 'shape', 'type': 'tuple[int, ...]', 'docs_id': 7, 'description': 'Shape of the matrix to create', 'default_value': None, 'is_optional': False}, {'name': 'value', 'type': 'float', 'docs_id': 8, 'description': 'Value to fill the matrix with', 'default_value': None, 'is_optional': False}, {'name': 'sharding_axis', 'type': 'int', 'docs_id': 9, 'description': 'Which axis to shard along', 'default_value': None, 'is_optional': False}, {'name': 'dtype', 'type': 'jnp.dtype', 'docs_id': 10, 'description': 'Data type of the matrix elements', 'default_value': None, 'is_optional': False}, {'name': 'backend', 'type': 'Literal["gpu", "tpu", "cpu"]', 'docs_id': 11, 'description': 'Which device backend to use ("gpu", "tpu", or "cpu")', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/distributed/#fdtdx.core.jax.sharding.create_named_sharded_matrix', 'error': False}]