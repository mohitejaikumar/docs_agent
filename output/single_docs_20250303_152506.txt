[{'id': 1, 'docs_id': 1, 'type': 'class', 'name': 'ConstraintInterface', 'description': 'Interface specification for constraint module inputs/outputs. Defines the type and shapes of arrays that a constraint module accepts or produces.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/<#fdtdx.constraints.module.ConstraintInterface>', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'class', 'name': 'ConstraintModule', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/<#fdtdx.constraints.module.ConstraintModule>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'type': 'class', 'name': 'StandardToInversePermittivityRange', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/<#fdtdx.constraints.module.StandardToInversePermittivityRange>', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 4, 'type': 'class', 'name': 'StandardToCustomRange', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/<#fdtdx.constraints.module.StandardToCustomRange>', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 5, 'type': 'class', 'name': 'StandardToPlusOneMinusOneRange', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/<#fdtdx.constraints.module.StandardToPlusOneMinusOneRange>', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 6, 'type': 'class', 'name': 'ClosestIndex', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/<#fdtdx.constraints.module.ClosestIndex>', 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 7, 'type': 'class', 'name': 'IndicesToInversePermittivities', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/<#fdtdx.constraints.module.IndicesToInversePermittivities>', 'error': False}, {'id': 8, 'docs_id': 8, 'type': 'example', 'code': '@extended_autoinit\nclass ConstraintInterface(ExtendedTreeClass):\n"""\nInterface specification for constraint module inputs/outputs.\n  Defines the type and shapes of arrays that a constraint module accepts or produces.\n  Attributes:\n    type: The type of constraint interface - one of:\n      - "latent": Raw latent parameters\n      - "index": Discrete material indices\n      - "inv_permittivity": Inverse permittivity values\n    shapes: Dictionary mapping array names to their expected shapes\n  """\n  type: Literal["latent", "index", "inv_permittivity"] = frozen_field()\n  shapes: dict[str, tuple[int, ...]] = frozen_field()', 'description': 'Example of ConstraintInterface class definition', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.module', 'description': 'This module contains classes for constraint modules in FDTD simulations. Constraint modules transform parameters between different representations while enforcing physical and fabrication constraints. They form a chain of transformations from latent parameters to final inverse permittivity values.', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'class', 'name': 'ConstraintModule', 'description': 'Abstract base class for constraint modules.  Constraint modules transform parameters between different representations while enforcing physical and fabrication constraints. They form a chain of transformations from latent parameters to final inverse permittivity values.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/#fdtdx.constraints.module.ConstraintModule', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'type': 'function', 'name': 'transform', 'description': 'Transforms input parameters.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 4, 'description': 'Input parameters'}], 'examples': [], 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'input_interface', 'description': 'Specifies the input interface for the module.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 6, 'description': 'Output interface'}], 'examples': [], 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'init_module', 'description': 'Initializes the constraint module.', 'signature': 'init_module(self: Self, config: SimulationConfig, permittivity_config: dict[str, float], output_interface: ConstraintInterface) -> Self', 'parameters': [{'name': 'config', 'type': 'SimulationConfig', 'docs_id': 8, 'description': 'Global simulation configuration'}, {'name': 'permittivity_config', 'type': 'dict[str, float]', 'docs_id': 9, 'description': 'Dictionary mapping material names to permittivity values'}, {'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 10, 'description': 'Interface specification for module outputs'}], 'examples': [], 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 11, 'type': 'class', 'name': 'StandardToInversePermittivityRange', 'description': 'Maps standard [0,1] range to inverse permittivity range. Linearly maps values from [0,1] to the range between minimum and maximum inverse permittivity values allowed by the material configuration.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/#fdtdx.constraints.module.StandardToInversePermittivityRange', 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 12, 'type': 'function', 'name': 'transform', 'description': 'Transforms input parameters from [0,1] range to inverse permittivity range.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 13, 'description': 'Input parameters in [0,1] range'}], 'examples': [], 'error': False}, {'id': 8, 'module_id': 1, 'docs_id': 14, 'type': 'function', 'name': 'input_interface', 'description': 'Specifies the input interface for the module.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 15, 'description': 'Output interface'}], 'examples': [], 'error': False}, {'id': 9, 'module_id': 1, 'docs_id': 16, 'type': 'class', 'name': 'StandardToCustomRange', 'description': 'Maps standard [0,1] range to custom range [min_value, max_value]. Linearly maps values from [0,1] to a custom range specified by min_value and max_value parameters.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/#fdtdx.constraints.module.StandardToCustomRange', 'error': False}, {'id': 10, 'module_id': 1, 'docs_id': 17, 'type': 'function', 'name': 'transform', 'description': 'Transforms input parameters from [0,1] range to a custom range.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 18, 'description': 'Input parameters in [0,1] range'}], 'examples': [], 'error': False}, {'id': 11, 'module_id': 1, 'docs_id': 19, 'type': 'function', 'name': 'input_interface', 'description': 'Specifies the input interface for the module.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 20, 'description': 'Output interface'}], 'examples': [], 'error': False}, {'id': 12, 'module_id': 1, 'docs_id': 21, 'type': 'class', 'name': 'StandardToPlusOneMinusOneRange', 'description': 'Maps standard [0,1] range to [-1,1] range. Special case of StandardToCustomRange that maps to [-1,1] range. Used for symmetric value ranges around zero.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/#fdtdx.constraints.module.StandardToPlusOneMinusOneRange', 'error': False}, {'id': 13, 'module_id': 1, 'docs_id': 22, 'type': 'class', 'name': 'ClosestIndex', 'description': 'Maps continuous values to nearest allowed material indices. For each input value, finds the index of the closest allowed inverse permittivity value. Uses straight-through gradient estimation to maintain differentiability.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/#fdtdx.constraints.module.ClosestIndex', 'error': False}, {'id': 14, 'module_id': 1, 'docs_id': 23, 'type': 'function', 'name': 'transform', 'description': 'Transforms input parameters to nearest material indices using straight-through gradient estimation.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 24, 'description': 'Input parameters'}], 'examples': [], 'error': False}, {'id': 15, 'module_id': 1, 'docs_id': 25, 'type': 'function', 'name': 'input_interface', 'description': 'Specifies the input interface for the module.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 26, 'description': 'Output interface'}], 'examples': [], 'error': False}, {'id': 16, 'module_id': 1, 'docs_id': 27, 'type': 'class', 'name': 'IndicesToInversePermittivities', 'description': 'Maps material indices to their inverse permittivity values. Converts discrete material indices into their corresponding inverse permittivity values from the allowed materials list. Uses straight-through gradient estimation to maintain differentiability.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/modules/#fdtdx.constraints.module.IndicesToInversePermittivities', 'error': False}, {'id': 17, 'module_id': 1, 'docs_id': 28, 'type': 'function', 'name': 'transform', 'description': 'Transforms material indices to inverse permittivity values using straight-through gradient estimation.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 29, 'description': 'Input parameters'}], 'examples': [], 'error': False}, {'id': 18, 'module_id': 1, 'docs_id': 30, 'type': 'function', 'name': 'input_interface', 'description': 'Specifies the input interface for the module.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 31, 'description': 'Output interface'}], 'examples': [], 'error': False}]