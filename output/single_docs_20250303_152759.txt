[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd', 'description': 'Core FDTD algorithms.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'reversible_fdtd', 'description': 'Reversible FDTD implementation.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.reversible_fdtd', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'type': 'function', 'name': 'checkpointed_fdtd', 'description': 'Checkpointed FDTD implementation.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.checkpointed_fdtd', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'custom_fdtd_forward', 'description': 'Custom FDTD forward propagation.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.custom_fdtd_forward', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'forward', 'description': 'Forward propagation function.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.forward.forward', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'forward_single_args_wrapper', 'description': 'Wrapper for forward propagation with single arguments.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.forward.forward_single_args_wrapper', 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'full_backward', 'description': 'Full backward propagation.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.backward.full_backward', 'error': False}, {'id': 8, 'module_id': 1, 'docs_id': 8, 'type': 'function', 'name': 'backward', 'description': 'Backward propagation function.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.backward.backward', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd', 'description': 'Time-reversal symmetric FDTD implementation with O(1) memory usage.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'checkpointed_fdtd', 'description': 'Run an FDTD simulation with gradient checkpointing for memory efficiency. This implementation uses checkpointing to reduce memory usage during backpropagation by only storing the field state at certain intervals and recomputing intermediate states as needed.', 'signature': 'checkpointed_fdtd(arrays: ArrayContainer, objects: ObjectContainer, config: SimulationConfig, key: jax.Array) -> SimulationState', 'parameters': [{'name': 'arrays', 'type': 'ArrayContainer', 'docs_id': 3, 'description': 'Initial state of the simulation containing fields and materials', 'default_value': None, 'is_optional': False}, {'name': 'objects', 'type': 'ObjectContainer', 'docs_id': 4, 'description': 'Collection of physical objects in the simulation', 'default_value': None, 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 5, 'description': 'Simulation parameters including checkpointing settings', 'default_value': None, 'is_optional': False}, {'name': 'key', 'type': 'jax.Array', 'docs_id': 6, 'description': 'JAX PRNGKey for any stochastic operations', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/<#fdtdx.fdtd.checkpointed_fdtd>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 7, 'type': 'class', 'name': 'ArrayContainer', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ArrayContainer', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 8, 'type': 'class', 'name': 'ObjectContainer', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ObjectContainer', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 9, 'type': 'class', 'name': 'SimulationConfig', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/core/config/#fdtdx.core.config.SimulationConfig', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 10, 'type': 'class', 'name': 'SimulationState', 'description': 'Tuple containing final time step and ArrayContainer with final state', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.SimulationState', 'error': False}, {'id': 7, 'type': 'example', 'code': 'def checkpointed_fdtd(\n  arrays: ArrayContainer,\n  objects: ObjectContainer,\n  config: SimulationConfig,\n  key: jax.Array,\n) -> SimulationState:\n  arrays = reset_array_container(arrays, objects)\n  state = (jnp.asarray(0, dtype=jnp.int32), arrays)\n  state = eqxi.while_loop(\n    max_steps=config.time_steps_total,\n    cond_fun=lambda s: config.time_steps_total > s[0],\n    body_fun=partial(\n      forward,\n      config=config,\n      objects=objects,\n      key=key,\n      record_detectors=True,\n      record_boundaries=config.invertible_optimization,\n      simulate_boundaries=True,\n    ),\n    init_val=state,\n    kind="lax" if config.only_forward is None else "checkpointed",\n    checkpoints=(None if config.gradient_config is None else config.gradient_config.num_checkpoints),\n  )\n  return state', 'description': 'Example implementation of the checkpointed_fdtd function.  Shows the use of `reset_array_container`, `jnp.asarray`, `eqxi.while_loop`, and `partial`.', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd', 'description': 'Gradient checkpointing FDTD implementation for memory-performance tradeoff.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'custom_fdtd_forward', 'description': 'Run a customizable forward FDTD simulation between specified time steps. This function provides fine-grained control over the simulation execution, allowing partial time evolution and customization of recording behavior.', 'signature': 'fdtdx.fdtd.custom_fdtd_forward(arrays, objects, config, key, reset_container, record_detectors, start_time, end_time)', 'parameters': [{'name': 'arrays', 'type': 'ArrayContainer', 'docs_id': 3, 'description': 'Initial state of the simulation', 'default_value': None, 'is_optional': False}, {'name': 'objects', 'type': 'ObjectContainer', 'docs_id': 4, 'description': 'Collection of physical objects', 'default_value': None, 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 5, 'description': 'Simulation parameters', 'default_value': None, 'is_optional': False}, {'name': 'key', 'type': 'Array', 'docs_id': 6, 'description': 'JAX PRNGKey for stochastic operations', 'default_value': None, 'is_optional': False}, {'name': 'reset_container', 'type': 'bool', 'docs_id': 7, 'description': 'Whether to reset the array container before starting', 'default_value': None, 'is_optional': False}, {'name': 'record_detectors', 'type': 'bool', 'docs_id': 8, 'description': 'Whether to record detector readings', 'default_value': None, 'is_optional': False}, {'name': 'start_time', 'type': 'int | Array', 'docs_id': 9, 'description': 'Time step to start from', 'default_value': None, 'is_optional': False}, {'name': 'end_time', 'type': 'int | Array', 'docs_id': 10, 'description': 'Time step to end at', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/<#fdtdx.fdtd.custom_fdtd_forward>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 11, 'type': 'class', 'name': 'ArrayContainer', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ArrayContainer', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 12, 'type': 'class', 'name': 'ObjectContainer', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ObjectContainer', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 13, 'type': 'class', 'name': 'SimulationConfig', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/core/config/#fdtdx.core.config.SimulationConfig', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 14, 'type': 'class', 'name': 'SimulationState', 'description': 'Tuple containing final time step and ArrayContainer with final state', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.SimulationState', 'error': False}, {'id': 7, 'module_id': None, 'docs_id': 15, 'type': 'function', 'name': 'reset_array_container', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': None, 'error': False}, {'id': 8, 'module_id': None, 'docs_id': 16, 'type': 'function', 'name': 'forward', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': None, 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd.forward', 'description': 'Module containing the forward propagation function for the FDTD simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'forward', 'description': "Performs one forward time step of the FDTD simulation. Implements the core FDTD update scheme based on Maxwell's equations discretized on the Yee grid.", 'signature': 'forward(state: SimulationState, config: SimulationConfig, objects: ObjectContainer, key: jax.Array, record_detectors: bool, record_boundaries: bool, simulate_boundaries: bool) -> SimulationState', 'parameters': [{'name': 'state', 'type': 'SimulationState', 'docs_id': 3, 'description': 'Current simulation state (time step and field values)', 'default_value': None, 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 4, 'description': 'Simulation configuration parameters', 'default_value': None, 'is_optional': False}, {'name': 'objects', 'type': 'ObjectContainer', 'docs_id': 5, 'description': 'Container with sources, PML and other simulation objects', 'default_value': None, 'is_optional': False}, {'name': 'key', 'type': 'jax.Array', 'docs_id': 6, 'description': 'Random key for compression', 'default_value': None, 'is_optional': False}, {'name': 'record_detectors', 'type': 'bool', 'docs_id': 7, 'description': 'Whether to record detector values', 'default_value': None, 'is_optional': False}, {'name': 'record_boundaries', 'type': 'bool', 'docs_id': 8, 'description': 'Whether to record boundary values for gradients', 'default_value': None, 'is_optional': False}, {'name': 'simulate_boundaries', 'type': 'bool', 'docs_id': 9, 'description': 'Whether to apply PML boundary conditions', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Forward propagation', 'code': 'state = forward(state, config, objects, key, True, True, True)', 'description': 'Performs a single forward time step, recording detector and boundary values, and simulating boundaries.'}], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/<#fdtdx.fdtd.forward.forward>', 'error': False}, {'id': 3, 'module_id': None, 'docs_id': 10, 'type': 'class', 'name': 'SimulationState', 'description': 'Represents the state of the FDTD simulation at a given time step.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.SimulationState', 'error': False}, {'id': 4, 'module_id': None, 'docs_id': 11, 'type': 'class', 'name': 'SimulationConfig', 'description': 'Contains the configuration parameters for the FDTD simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/core/config/#fdtdx.core.config.SimulationConfig', 'error': False}, {'id': 5, 'module_id': None, 'docs_id': 12, 'type': 'class', 'name': 'ObjectContainer', 'description': 'Container for simulation objects such as sources and PML boundary conditions.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ObjectContainer', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd.forward', 'description': 'Module containing the forward FDTD time stepping implementation.', 'url': None, 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'forward_single_args_wrapper', 'description': 'Wrapper function that unpacks ArrayContainer into individual arrays for JAX transformations. This function provides a JAX-compatible interface by handling individual arrays instead of container objects. It converts between the array-based interface required by JAX and the object-oriented ArrayContainer interface used by the rest of the FDTD implementation.', 'signature': 'forward_single_args_wrapper(time_step: jax.Array, E: jax.Array, H: jax.Array, inv_permittivities: jax.Array, inv_permeabilities: jax.Array, boundary_states: dict[str, BoundaryState], detector_states: dict[str, DetectorState], recording_state: RecordingState | None, config: SimulationConfig, objects: ObjectContainer, key: jax.Array, record_detectors: bool, record_boundaries: bool, simulate_boundaries: bool) -> tuple[jax.Array, jax.Array, jax.Array, jax.Array, jax.Array, dict[str, BoundaryState], dict[str, DetectorState], RecordingState | None]', 'parameters': [{'name': 'time_step', 'type': 'jax.Array', 'docs_id': 3, 'description': 'Current simulation time step', 'default_value': None, 'is_optional': False}, {'name': 'E', 'type': 'jax.Array', 'docs_id': 4, 'description': 'Electric field array', 'default_value': None, 'is_optional': False}, {'name': 'H', 'type': 'jax.Array', 'docs_id': 5, 'description': 'Magnetic field array', 'default_value': None, 'is_optional': False}, {'name': 'inv_permittivities', 'type': 'jax.Array', 'docs_id': 6, 'description': 'Inverse permittivity values', 'default_value': None, 'is_optional': False}, {'name': 'inv_permeabilities', 'type': 'jax.Array', 'docs_id': 7, 'description': 'Inverse permeability values', 'default_value': None, 'is_optional': False}, {'name': 'boundary_states', 'type': 'dict[str, BoundaryState]', 'docs_id': 8, 'description': 'PML boundary conditions state', 'default_value': None, 'is_optional': False}, {'name': 'detector_states', 'type': 'dict[str, DetectorState]', 'docs_id': 9, 'description': 'States of field detectors', 'default_value': None, 'is_optional': False}, {'name': 'recording_state', 'type': 'RecordingState | None', 'docs_id': 10, 'description': 'Optional state for recording field values', 'default_value': None, 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 11, 'description': 'Simulation configuration parameters', 'default_value': None, 'is_optional': False}, {'name': 'objects', 'type': 'ObjectContainer', 'docs_id': 12, 'description': 'Container with sources and other simulation objects', 'default_value': None, 'is_optional': False}, {'name': 'key', 'type': 'jax.Array', 'docs_id': 13, 'description': 'Random key for compression', 'default_value': None, 'is_optional': False}, {'name': 'record_detectors', 'type': 'bool', 'docs_id': 14, 'description': 'Whether to record detector values', 'default_value': None, 'is_optional': False}, {'name': 'record_boundaries', 'type': 'bool', 'docs_id': 15, 'description': 'Whether to record boundary values', 'default_value': None, 'is_optional': False}, {'name': 'simulate_boundaries', 'type': 'bool', 'docs_id': 16, 'description': 'Whether to apply PML boundary conditions', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Forward time stepping', 'code': 'state = forward_single_args_wrapper(time_step, E, H, inv_permittivities, inv_permeabilities, boundary_states, detector_states, recording_state, config, objects, key, record_detectors, record_boundaries, simulate_boundaries)', 'description': 'This example shows how to use the forward_single_args_wrapper function to perform a single forward time step in the FDTD simulation.'}], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.forward.forward_single_args_wrapper', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd.backward', 'description': 'Module containing backward propagation functions for FDTD simulations.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'full_backward', 'description': "Perform full backward FDTD propagation from current state to start time. Uses a while loop to repeatedly call backward() until reaching start_time_step. Leverages time-reversibility of Maxwell's equations.", 'signature': 'full_backward(state: SimulationState, objects: ObjectContainer, config: SimulationConfig, key: jax.Array, record_detectors: bool, reset_fields: bool, start_time_step: int = 0) -> SimulationState', 'parameters': [{'name': 'state', 'type': 'SimulationState', 'docs_id': 3, 'description': 'Current simulation state tuple (time_step, arrays)', 'default_value': None, 'is_optional': False}, {'name': 'objects', 'type': 'ObjectContainer', 'docs_id': 4, 'description': 'Container with simulation objects (sources, detectors, etc)', 'default_value': None, 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 5, 'description': 'Simulation configuration parameters', 'default_value': None, 'is_optional': False}, {'name': 'key', 'type': 'jax.Array', 'docs_id': 6, 'description': 'JAX PRNG key for random operations', 'default_value': None, 'is_optional': False}, {'name': 'record_detectors', 'type': 'bool', 'docs_id': 7, 'description': 'Whether to record detector states', 'default_value': None, 'is_optional': False}, {'name': 'reset_fields', 'type': 'bool', 'docs_id': 8, 'description': 'Whether to reset fields after each step', 'default_value': None, 'is_optional': False}, {'name': 'start_time_step', 'type': 'int', 'docs_id': 9, 'description': 'Time step to propagate back to (default: 0)', 'default_value': '0', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/<#fdtdx.fdtd.backward.full_backward>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 10, 'type': 'class', 'name': 'SimulationState', 'description': 'Represents the state of a FDTD simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.SimulationState', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 11, 'type': 'class', 'name': 'ObjectContainer', 'description': 'Container for simulation objects.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ObjectContainer', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 12, 'type': 'class', 'name': 'SimulationConfig', 'description': 'Configuration parameters for the simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/core/config/#fdtdx.core.config.SimulationConfig', 'error': False}, {'id': 6, 'docs_id': 13, 'type': 'example', 'code': 'def full_backward(\n  state: SimulationState,\n  objects: ObjectContainer,\n  config: SimulationConfig,\n  key: jax.Array,\n  record_detectors: bool,\n  reset_fields: bool,\n  start_time_step: int = 0,\n) -> SimulationState:\n  s0 = eqxi.while_loop(\n    cond_fun=partial(cond_fn, start_time_step=start_time_step),\n    body_fun=partial(\n      backward,\n      config=config,\n      objects=objects,\n      key=key,\n      record_detectors=record_detectors,\n      reset_fields=reset_fields,\n    ),\n    init_val=state,\n    kind="lax",\n  )\n  return s0', 'description': 'Example implementation of the full_backward function.', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd', 'description': 'Module containing core FDTD algorithms.', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'reversible_fdtd', 'description': 'Run a memory-efficient differentiable FDTD simulation leveraging time-reversal symmetry.', 'signature': 'fdtdx.fdtd.reversible_fdtd(arrays, objects, config, key)', 'parameters': [{'name': 'arrays', 'type': 'ArrayContainer', 'docs_id': 3, 'description': 'Initial state of the simulation containing: - E, H: Electric and magnetic field arrays - inv_permittivities, inv_permeabilities: Material properties - boundary_states: Dictionary of boundary conditions - detector_states: Dictionary of field detectors - recording_state: Optional state for recording field evolution', 'default_value': '_required_', 'is_optional': False}, {'name': 'objects', 'type': 'ObjectContainer', 'docs_id': 4, 'description': 'Collection of physical objects in the simulation (sources, detectors, boundaries, etc.)', 'default_value': '_required_', 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 5, 'description': 'Simulation parameters including: - time_steps_total: Total number of steps to simulate - invertible_optimization: Whether to record boundaries for backprop', 'default_value': '_required_', 'is_optional': False}, {'name': 'key', 'type': 'Array', 'docs_id': 6, 'description': 'JAX PRNGKey for any stochastic operations', 'default_value': '_required_', 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/<#fdtdx.fdtd.reversible_fdtd>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'reversible_fdtd_base', 'description': "Core implementation of reversible FDTD simulation. Performs the main FDTD time-stepping loop using a while loop that respects JAX's functional programming model.", 'signature': 'reversible_fdtd_base(arr: ArrayContainer) -> SimulationState', 'parameters': [{'name': 'arr', 'type': 'ArrayContainer', 'docs_id': 8, 'description': 'ArrayContainer with initial field state and material properties', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 9, 'type': 'function', 'name': 'reversible_fdtd_primal', 'description': None, 'signature': '@jax.custom_vjp\ndef reversible_fdtd_primal(\n    E: jax.Array,\n    H: jax.Array,\n    inv_permittivities: jax.Array,\n    inv_permeabilities: jax.Array,\n    boundary_states: dict[str, BoundaryState],\n    detector_states: dict[str, DetectorState],\n    recording_state: RecordingState | None,\n  )', 'parameters': [{'name': 'E', 'type': 'jax.Array', 'docs_id': 10, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'H', 'type': 'jax.Array', 'docs_id': 11, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'inv_permittivities', 'type': 'jax.Array', 'docs_id': 12, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'inv_permeabilities', 'type': 'jax.Array', 'docs_id': 13, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'boundary_states', 'type': 'dict[str, BoundaryState]', 'docs_id': 14, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'detector_states', 'type': 'dict[str, DetectorState]', 'docs_id': 15, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'recording_state', 'type': 'RecordingState | None', 'docs_id': 16, 'description': None, 'default_value': None, 'is_optional': True}], 'examples': [], 'url': None, 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 17, 'type': 'function', 'name': 'body_fn', 'description': None, 'signature': 'def body_fn(\n    sr_tuple,\n  )', 'parameters': [{'name': 'sr_tuple', 'type': None, 'docs_id': 18, 'description': None, 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 19, 'type': 'function', 'name': 'cond_fun', 'description': None, 'signature': 'def cond_fun(\n    sr_tuple,\n    start_time_step: int,\n  )', 'parameters': [{'name': 'sr_tuple', 'type': None, 'docs_id': 20, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'start_time_step', 'type': 'int', 'docs_id': 21, 'description': None, 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 22, 'type': 'function', 'name': 'fdtd_bwd', 'description': 'Backward pass for reversible FDTD simulation. Implements the custom vector-Jacobian product for backpropagation through the FDTD simulation by leveraging time-reversibility.', 'signature': 'def fdtd_bwd(\n    residual,\n    cot,\n  )', 'parameters': [{'name': 'residual', 'type': None, 'docs_id': 23, 'description': 'Tuple containing the final simulation state including: - Time step - E, H field arrays - Material properties - Boundary and detector states - Recording state', 'default_value': None, 'is_optional': False}, {'name': 'cot', 'type': None, 'docs_id': 24, 'description': 'Cotangent values for gradient computation', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 8, 'module_id': 1, 'docs_id': 25, 'type': 'function', 'name': 'fdtd_fwd', 'description': 'Forward pass for reversible FDTD simulation. Performs the forward FDTD simulation and prepares residuals for the backward pass.', 'signature': 'def fdtd_fwd(\n    E: jax.Array,\n    H: jax.Array,\n    inv_permittivities: jax.Array,\n    inv_permeabilities: jax.Array,\n    boundary_states: dict[str, BoundaryState],\n    detector_states: dict[str, DetectorState],\n    recording_state: RecordingState | None,\n  )', 'parameters': [{'name': 'E', 'type': 'jax.Array', 'docs_id': 26, 'description': 'Electric field array', 'default_value': None, 'is_optional': False}, {'name': 'H', 'type': 'jax.Array', 'docs_id': 27, 'description': 'Magnetic field array', 'default_value': None, 'is_optional': False}, {'name': 'inv_permittivities', 'type': 'jax.Array', 'docs_id': 28, 'description': 'Inverse permittivity values', 'default_value': None, 'is_optional': False}, {'name': 'inv_permeabilities', 'type': 'jax.Array', 'docs_id': 29, 'description': 'Inverse permeability values', 'default_value': None, 'is_optional': False}, {'name': 'boundary_states', 'type': 'dict[str, BoundaryState]', 'docs_id': 30, 'description': 'Dictionary mapping boundary names to their states', 'default_value': None, 'is_optional': False}, {'name': 'detector_states', 'type': 'dict[str, DetectorState]', 'docs_id': 31, 'description': 'Dictionary mapping detector names to their states', 'default_value': None, 'is_optional': False}, {'name': 'recording_state', 'type': 'RecordingState | None', 'docs_id': 32, 'description': 'Optional state for recording field evolution', 'default_value': None, 'is_optional': True}], 'examples': [], 'url': None, 'error': False}, {'id': 9, 'module_id': None, 'docs_id': 33, 'type': 'class', 'name': 'ArrayContainer', 'description': 'Container for arrays used in the FDTD simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ArrayContainer', 'error': False}, {'id': 10, 'module_id': None, 'docs_id': 34, 'type': 'class', 'name': 'ObjectContainer', 'description': 'Container for objects used in the FDTD simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.ObjectContainer', 'error': False}, {'id': 11, 'module_id': None, 'docs_id': 35, 'type': 'class', 'name': 'SimulationConfig', 'description': 'Configuration parameters for the FDTD simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/core/config/#fdtdx.core.config.SimulationConfig', 'error': False}, {'id': 12, 'module_id': None, 'docs_id': 36, 'type': 'class', 'name': 'SimulationState', 'description': 'State of the FDTD simulation.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/objects/containers/#fdtdx.objects.container.SimulationState', 'error': False}, {'id': 13, 'module_id': None, 'docs_id': 37, 'type': 'class', 'name': 'BoundaryState', 'description': 'State of a boundary condition in the FDTD simulation.', 'url': None, 'error': False}, {'id': 14, 'module_id': None, 'docs_id': 38, 'type': 'class', 'name': 'DetectorState', 'description': 'State of a field detector in the FDTD simulation.', 'url': None, 'error': False}, {'id': 15, 'module_id': None, 'docs_id': 39, 'type': 'class', 'name': 'RecordingState', 'description': 'State for recording field evolution in the FDTD simulation.', 'url': None, 'error': False}, {'type': 'example', 'code': 'reversible_fdtd(arrays, objects, config, key)', 'description': 'Example usage of the reversible_fdtd function.  Requires properly initialized `arrays`, `objects`, and `config` objects, and a JAX PRNGKey.', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.fdtd.backward', 'description': 'Module containing backward FDTD propagation functions.', 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'backward', 'description': "Perform one step of backward FDTD propagation. Updates fields from time step t to t-1 using time-reversed Maxwell's equations. Handles interfaces, field updates, optional field resetting, and detector recording.", 'signature': 'backward(state: SimulationState, config: SimulationConfig, objects: ObjectContainer, key: jax.Array, record_detectors: bool, reset_fields: bool, fields_to_reset: Sequence[str] = ("E", "H")) -> SimulationState', 'parameters': [{'name': 'state', 'type': 'SimulationState', 'docs_id': 3, 'description': 'Current simulation state tuple (time_step, arrays)', 'default_value': None, 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 4, 'description': 'Simulation configuration parameters', 'default_value': None, 'is_optional': False}, {'name': 'objects', 'type': 'ObjectContainer', 'docs_id': 5, 'description': 'Container with simulation objects (sources, detectors, etc)', 'default_value': None, 'is_optional': False}, {'name': 'key', 'type': 'jax.Array', 'docs_id': 6, 'description': 'JAX PRNG key for random operations', 'default_value': None, 'is_optional': False}, {'name': 'record_detectors', 'type': 'bool', 'docs_id': 7, 'description': 'Whether to record detector states', 'default_value': None, 'is_optional': False}, {'name': 'reset_fields', 'type': 'bool', 'docs_id': 8, 'description': 'Whether to reset fields after updates', 'default_value': None, 'is_optional': False}, {'name': 'fields_to_reset', 'type': 'Sequence[str]', 'docs_id': 9, 'description': 'Which fields to reset if reset_fields is True', 'default_value': '("E", "H")', 'is_optional': True}], 'examples': [{'type': 'Backward propagation step', 'code': 'state = backward(state, config, objects, key, True, False)', 'description': 'Performs a single backward step, recording detector states but not resetting fields.'}], 'url': 'https://ymahlau.github.io/fdtdx/api/fdtd/core/#fdtdx.fdtd.backward.backward', 'error': False}]