[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.misc', 'description': None, 'url': None, 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'index_by_slice_take', 'description': "Takes elements from an array using multiple slices and JAX's take operation. Optimized version of array slicing that uses JAX's take operation for better performance when taking elements along multiple axes.", 'signature': 'index_by_slice_take(arr: jax.Array, slices: Sequence[slice]) -> jax.Array', 'parameters': [{'name': 'arr', 'type': 'jax.Array', 'docs_id': 3, 'description': 'Input array', 'default_value': None, 'is_optional': False}, {'name': 'slices', 'type': 'Sequence[slice]', 'docs_id': 4, 'description': 'Sequence of slice objects, one for each dimension', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.index_by_slice_take>', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'mask_1d_from_slice', 'description': 'Creates a boolean mask array from a slice specification.', 'signature': 'mask_1d_from_slice(s: slice, axis_size: int) -> jax.Array', 'parameters': [{'name': 's', 'type': 'slice', 'docs_id': 6, 'description': 'Slice object defining which elements should be True', 'default_value': None, 'is_optional': False}, {'name': 'axis_size', 'type': 'int', 'docs_id': 7, 'description': 'Size of the axis to create mask for', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.mask_1d_from_slice>', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.misc', 'description': None, 'url': None, 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'expand_matrix', 'description': 'Expands a matrix by repeating values along spatial dimensions and optionally adding channels. Used to upsample a coarse grid to a finer simulation grid by repeating values. Can also add vector field components as channels.', 'signature': 'expand_matrix(matrix: jax.Array, grid_points_per_voxel: tuple[int, ...], add_channels: bool = True) -> jax.Array', 'parameters': [{'name': 'matrix', 'type': 'Array', 'docs_id': 3, 'description': 'Input matrix to expand', 'default_value': None, 'is_optional': False}, {'name': 'grid_points_per_voxel', 'type': 'tuple[int, ...]', 'docs_id': 4, 'description': 'Number of grid points to expand each voxel into along each dimension', 'default_value': None, 'is_optional': False}, {'name': 'add_channels', 'type': 'bool', 'docs_id': 5, 'description': 'If True, adds and tiles 3 channels for vector field components', 'default_value': 'True', 'is_optional': True}], 'examples': [], 'url': None, 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'ensure_slice_tuple', 'description': 'Ensures that all elements of the input sequence are converted to slices. This function takes a sequence of elements that can be slices, integers, or tuples of integers and returns a tuple of slices. Integers are converted to slices that select a single item, and tuples are converted to slices that select a range of items.', 'signature': 'ensure_slice_tuple(t: Sequence[slice | int | Tuple[int, int]]) -> Tuple[slice, ...]', 'parameters': [{'name': 't', 'type': 'Sequence[slice | int | Tuple[int, int]]', 'docs_id': 7, 'description': 'A sequence of elements where each element is either a slice, an integer, or a tuple of two integers representing the start and end of a slice range.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'function', 'name': 'index_1d_array', 'description': 'Finds the first index where a 1D array equals a given value.', 'signature': 'index_1d_array(arr: jax.Array, val: jax.Array) -> jax.Array', 'parameters': [{'name': 'arr', 'type': 'Array', 'docs_id': 2, 'description': '1D input array to search', 'default_value': None, 'is_optional': False}, {'name': 'val', 'type': 'Array', 'docs_id': 3, 'description': 'Value to find in the array', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/#fdtdx.core.misc.index_1d_array', 'error': False}, {'id': 2, 'docs_id': 4, 'type': 'function', 'name': 'index_by_slice', 'description': 'Indexes an array along a specified axis using slice notation.', 'signature': 'index_by_slice(arr: jax.Array, start: int | None, stop: int | None, axis: int, step: int = 1) -> jax.Array', 'parameters': [{'name': 'arr', 'type': 'Array', 'docs_id': 5, 'description': 'Input array to slice', 'default_value': None, 'is_optional': False}, {'name': 'start', 'type': 'int | None', 'docs_id': 6, 'description': 'Starting index', 'default_value': None, 'is_optional': False}, {'name': 'stop', 'type': 'int | None', 'docs_id': 7, 'description': 'Stopping index', 'default_value': None, 'is_optional': False}, {'name': 'axis', 'type': 'int', 'docs_id': 8, 'description': 'Axis along which to slice', 'default_value': None, 'is_optional': False}, {'name': 'step', 'type': 'int', 'docs_id': 9, 'description': 'Step size between elements', 'default_value': '1', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/#fdtdx.core.misc.index_by_slice', 'error': False}, {'id': 3, 'docs_id': 10, 'type': 'function', 'name': 'index_by_slice_take_1d', 'description': "Takes elements from an array along one axis using a slice and JAX's take operation. Optimized version of array slicing that uses JAX's take operation for better performance when taking elements along a single axis.", 'signature': 'index_by_slice_take_1d(arr: jax.Array, slice: slice, axis: int) -> jax.Array', 'parameters': [{'name': 'arr', 'type': 'Array', 'docs_id': 11, 'description': 'Input array', 'default_value': None, 'is_optional': False}, {'name': 'slice', 'type': 'slice', 'docs_id': 12, 'description': 'Slice object specifying which elements to take', 'default_value': None, 'is_optional': False}, {'name': 'axis', 'type': 'int', 'docs_id': 13, 'description': 'Axis along which to take elements', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/#fdtdx.core.misc.index_by_slice_take_1d', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.misc', 'description': 'Module containing miscellaneous array utility functions.', 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'expand_matrix', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.expand_matrix>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'type': 'function', 'name': 'ensure_slice_tuple', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.ensure_slice_tuple>', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'index_1d_array', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.index_1d_array>', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'index_by_slice', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.index_by_slice>', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'index_by_slice_take_1d', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.index_by_slice_take_1d>', 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'index_by_slice_take', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.index_by_slice_take>', 'error': False}, {'id': 8, 'module_id': 1, 'docs_id': 8, 'type': 'function', 'name': 'mask_1d_from_slice', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.mask_1d_from_slice>', 'error': False}, {'id': 9, 'module_id': 1, 'docs_id': 9, 'type': 'function', 'name': 'assimilate_shape', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.assimilate_shape>', 'error': False}, {'id': 10, 'module_id': 1, 'docs_id': 10, 'type': 'function', 'name': 'linear_interpolated_indexing', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.linear_interpolated_indexing>', 'error': False}, {'id': 11, 'module_id': 1, 'docs_id': 11, 'type': 'function', 'name': 'advanced_padding', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.advanced_padding>', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.misc', 'description': None, 'url': None, 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'assimilate_shape', 'description': "Reshapes array to match reference array's dimensions for broadcasting. Inserts new dimensions of size 1 such that arr has same dimensions as ref_arr and can be broadcasted. Optionally repeats single dimensions to match ref_arr's shape.", 'signature': 'assimilate_shape(arr: jax.Array, ref_arr: jax.Array, ref_axes: tuple[int, ...], repeat_single_dims: bool = False) -> jax.Array', 'parameters': [{'name': 'arr', 'type': 'Array', 'docs_id': 3, 'description': 'Array to reshape', 'default_value': None, 'is_optional': False}, {'name': 'ref_arr', 'type': 'Array', 'docs_id': 4, 'description': 'Reference array whose shape to match', 'default_value': None, 'is_optional': False}, {'name': 'ref_axes', 'type': 'tuple[int, ...]', 'docs_id': 5, 'description': "Tuple mapping arr's axes to ref_arr's axes", 'default_value': None, 'is_optional': False}, {'name': 'repeat_single_dims', 'type': 'bool', 'docs_id': 6, 'description': 'If True, repeats size-1 dimensions to match ref_arr', 'default_value': 'False', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.assimilate_shape>', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'linear_interpolated_indexing', 'description': 'Performs linear interpolation at a point in an array.', 'signature': 'linear_interpolated_indexing(point: jax.Array, arr: jax.Array) -> jax.Array', 'parameters': [{'name': 'point', 'type': 'Array', 'docs_id': 8, 'description': 'Coordinates at which to interpolate', 'default_value': None, 'is_optional': False}, {'name': 'arr', 'type': 'Array', 'docs_id': 9, 'description': 'Array to interpolate from', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.linear_interpolated_indexing>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 10, 'type': 'function', 'name': 'advanced_padding', 'description': 'Pads the input array with configurable padding modes and widths.', 'signature': 'advanced_padding(arr: jax.Array, padding_cfg: PaddingConfig) -> tuple[jax.Array, tuple[slice, ...]]', 'parameters': [{'name': 'arr', 'type': 'Array', 'docs_id': 11, 'description': 'Input array to pad', 'default_value': None, 'is_optional': False}, {'name': 'padding_cfg', 'type': 'PaddingConfig', 'docs_id': 12, 'description': 'Configuration object containing: - widths: Padding widths for each edge - modes: Padding modes (constant, edge, reflect etc) - values: Values to use for constant padding', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/arrays/<#fdtdx.core.misc.advanced_padding>', 'error': False}]