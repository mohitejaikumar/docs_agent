[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.physics.metrics', 'description': 'Module containing metrics for computing energy and efficiency.', 'url': 'https://ymahlau.github.io/fdtdx/api/physics/metrics/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'compute_energy', 'description': 'Computes the total electromagnetic energy density of the field.', 'signature': 'compute_energy(E, H, inv_permittivity, inv_permeability)', 'parameters': [{'name': 'E', 'type': 'Array', 'docs_id': 3, 'description': 'Electric field array with shape (3, nx, ny, nz)', 'default_value': None, 'is_optional': False}, {'name': 'H', 'type': 'Array', 'docs_id': 4, 'description': 'Magnetic field array with shape (3, nx, ny, nz)', 'default_value': None, 'is_optional': False}, {'name': 'inv_permittivity', 'type': 'Array', 'docs_id': 5, 'description': 'Inverse of the electric permittivity array', 'default_value': None, 'is_optional': False}, {'name': 'inv_permeability', 'type': 'Array', 'docs_id': 6, 'description': 'Inverse of the magnetic permeability array', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/physics/metrics/#fdtdx.core.physics.metrics.compute_energy', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'normalize_by_energy', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/physics/metrics/#fdtdx.core.physics.metrics.normalize_by_energy', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 8, 'type': 'function', 'name': 'poynting_flux', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/physics/metrics/#fdtdx.core.physics.metrics.poynting_flux', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 9, 'type': 'function', 'name': 'metric_efficiency', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/physics/metrics/#fdtdx.core.physics.losses.metric_efficiency', 'error': False}, {'id': 6, 'docs_id': 10, 'type': 'compute_energy function example', 'code': 'def compute_energy(\n  E: jax.Array,\n  H: jax.Array,\n  inv_permittivity: jax.Array,\n  inv_permeability: jax.Array,\n) -> jax.Array:\n  """Computes the total electromagnetic energy density of the field.\n  Args:\n    E: Electric field array with shape (3, nx, ny, nz)\n    H: Magnetic field array with shape (3, nx, ny, nz)\n    inv_permittivity: Inverse of the electric permittivity array\n    inv_permeability: Inverse of the magnetic permeability array\n  Returns:\n    Total energy density array with shape (nx, ny, nz)\n  """\n  abs_E = jnp.sum(jnp.square(E), axis=0)\n  energy_E = 0.5 * (1 / inv_permittivity) * abs_E\n  abs_H = jnp.sum(jnp.square(H), axis=0)\n  energy_H = 0.5 * (1 / inv_permeability) * abs_H\n  total_energy = energy_E + energy_H\n  return total_energy', 'description': 'Example code for compute_energy function', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.physics.metrics', 'description': 'Module containing metrics for FDTD simulations.', 'url': None, 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'normalize_by_energy', 'description': 'Normalizes electromagnetic fields by their total energy.', 'signature': 'normalize_by_energy(E: jax.Array, H: jax.Array, inv_permittivity: jax.Array, inv_permeability: jax.Array) -> tuple[jax.Array, jax.Array]', 'parameters': [{'name': 'E', 'type': 'jax.Array', 'docs_id': 3, 'description': 'Electric field array with shape (3, nx, ny, nz)', 'default_value': None, 'is_optional': False}, {'name': 'H', 'type': 'jax.Array', 'docs_id': 4, 'description': 'Magnetic field array with shape (3, nx, ny, nz)', 'default_value': None, 'is_optional': False}, {'name': 'inv_permittivity', 'type': 'jax.Array', 'docs_id': 5, 'description': 'Inverse of the electric permittivity array', 'default_value': None, 'is_optional': False}, {'name': 'inv_permeability', 'type': 'jax.Array', 'docs_id': 6, 'description': 'Inverse of the magnetic permeability array', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Normalization of EM fields', 'code': 'E_norm, H_norm = normalize_by_energy(E, H, inv_permittivity, inv_permeability)', 'description': 'Normalizes the electric and magnetic fields E and H using the provided permittivity and permeability values.'}], 'url': None, 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'poynting_flux', 'description': 'Calculates the Poynting vector (energy flux) from E and H fields.', 'signature': 'poynting_flux(E: jax.Array, H: jax.Array) -> jax.Array', 'parameters': [{'name': 'E', 'type': 'jax.Array', 'docs_id': 8, 'description': 'Electric field array with shape (3, nx, ny, nz)', 'default_value': None, 'is_optional': False}, {'name': 'H', 'type': 'jax.Array', 'docs_id': 9, 'description': 'Magnetic field array with shape (3, nx, ny, nz)', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Poynting vector calculation', 'code': 'poynting = poynting_flux(E, H)', 'description': 'Computes the Poynting vector representing energy flux from electric field E and magnetic field H.'}], 'url': None, 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 10, 'type': 'function', 'name': 'metric_efficiency', 'description': 'Calculate efficiency metrics between input and output detectors.', 'signature': 'metric_efficiency(detector_states: dict[str, dict[str, jax.Array]], in_names: Sequence[str], out_names: Sequence[str], metric_name: str) -> tuple[jax.Array, dict[str, Any]]', 'parameters': [{'name': 'detector_states', 'type': 'dict[str, dict[str, jax.Array]]', 'docs_id': 11, 'description': 'Dictionary mapping detector names to their state dictionaries, which contain metric values as JAX arrays', 'default_value': None, 'is_optional': False}, {'name': 'in_names', 'type': 'Sequence[str]', 'docs_id': 12, 'description': 'Names of input detectors to use as reference', 'default_value': None, 'is_optional': False}, {'name': 'out_names', 'type': 'Sequence[str]', 'docs_id': 13, 'description': 'Names of output detectors to compare against inputs', 'default_value': None, 'is_optional': False}, {'name': 'metric_name', 'type': 'str', 'docs_id': 14, 'description': 'Name of the metric to compare between detectors (e.g. "energy")', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Efficiency calculation', 'code': 'mean_efficiency, efficiency_info = metric_efficiency(detector_states, in_names, out_names, "energy")', 'description': 'Calculates the mean efficiency and additional information about individual detector efficiencies based on energy values.'}], 'url': None, 'error': False}]