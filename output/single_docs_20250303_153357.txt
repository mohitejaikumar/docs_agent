[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.objects.multi_material.device', 'description': 'Module containing the Device class.', 'url': None, 'error': False}, {'id': 2, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.physics', 'description': 'Module containing physical constants.', 'url': None, 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 1, 'type': 'class', 'name': 'Device', 'description': 'Basic building block for an object optimizable by inverse design.', 'url': None, 'error': False}, {'id': 4, 'docs_id': 2, 'type': 'module', 'name': 'fdtdx.constraints.mapping', 'description': 'Module containing the ConstraintMapping class.', 'url': None, 'error': False}, {'id': 5, 'docs_id': 2, 'type': 'module', 'name': 'fdtdx.constraints.module', 'description': 'Module containing constraint modules.', 'url': None, 'error': False}, {'id': 6, 'module_id': 5, 'docs_id': 2, 'type': 'class', 'name': 'ConstraintMapping', 'description': 'Specifies the mapping from continuous latent parameters to inverse permittivities.', 'url': None, 'error': False}, {'id': 7, 'module_id': 5, 'docs_id': 2, 'type': 'class', 'name': 'ClosestIndex', 'description': 'Finds the closest material to the mapped value.', 'url': None, 'error': False}, {'id': 8, 'module_id': 5, 'docs_id': 2, 'type': 'class', 'name': 'IndicesToInversePermittivities', 'description': 'Converts indices to inverse permittivities.', 'url': None, 'error': False}, {'id': 9, 'module_id': 5, 'docs_id': 2, 'type': 'class', 'name': 'StandardToInversePermittivityRange', 'description': 'Maps the [0, 1] range to [1/ε_max, 1/ε_min].', 'url': None, 'error': False}, {'id': 10, 'docs_id': 3, 'type': 'module', 'name': 'fdtdx.constraints.discrete', 'description': 'Module containing discrete constraints.', 'url': None, 'error': False}, {'id': 11, 'module_id': 10, 'docs_id': 3, 'type': 'class', 'name': 'BrushConstraint2D', 'description': 'Enforces minimum feature size using a brush.', 'url': None, 'error': False}, {'id': 12, 'module_id': 10, 'docs_id': 3, 'type': 'function', 'name': 'circular_brush', 'description': 'Creates a circular brush.', 'url': None, 'error': False}, {'id': 13, 'module_id': 5, 'docs_id': 3, 'type': 'class', 'name': 'StandardToPlusOneMinusOneRange', 'description': 'Maps the [0, 1] range to [-1, 1].', 'url': None, 'error': False}, {'id': 14, 'docs_id': 4, 'type': 'module', 'name': 'fdtdx.constraints.discrete', 'description': 'Module containing discrete constraints for 2PP.', 'url': None, 'error': False}, {'id': 15, 'module_id': 14, 'docs_id': 4, 'type': 'class', 'name': 'BOTTOM_Z_PADDING_CONFIG_REPEAT', 'description': 'Padding configuration for BinaryMedianFilterModule.', 'url': None, 'error': False}, {'id': 16, 'module_id': 14, 'docs_id': 4, 'type': 'class', 'name': 'BinaryMedianFilterModule', 'description': 'Applies a median filter for smoothing.', 'url': None, 'error': False}, {'id': 17, 'module_id': 14, 'docs_id': 4, 'type': 'class', 'name': 'RemoveFloatingMaterial', 'description': 'Removes floating material without ground connection.', 'url': None, 'error': False}, {'id': 18, 'type': 'example', 'code': 'from fdtdx.objects.multi_material.device import Device\nfrom fdtdx.core.physics import constants\n\npermittivity_config = {\n  "Air": constants.relative_permittivity_air,\n  "Polymer": constants.relative_permittivity_ma_N_1400_series,\n}\ndevice_scatter = Device(\n  name="Device",\n  partial_real_shape=(1e-6, 1e-6, 1e-6),\n  permittivity_config=permittivity_config,\n  constraint_mapping=..., # <- This needs to be filled\n  partial_voxel_real_shape=(0.2e-6, 0.2e-6, 0.2e-6),\n)', 'description': 'Example of Device creation with constraint mapping.', 'error': False}, {'id': 19, 'type': 'example', 'code': 'from fdtdx.constraints.mapping import ConstraintMapping\nfrom fdtdx.constraints.module import (\n  ClosestIndex, \n  IndicesToInversePermittivities, \n  StandardToInversePermittivityRange,\n)\n\nmapping = ConstraintMapping(\n  modules=[\n    StandardToInversePermittivityRange(),\n    ClosestIndex(),\n    IndicesToInversePermittivities(),\n  ],\n)', 'description': 'Example of a simple constraint mapping.', 'error': False}, {'id': 20, 'type': 'example', 'code': 'from fdtdx.constraints.mapping import ConstraintMapping\nfrom fdtdx.constraints.discrete import BrushConstraint2D, circular_brush\nfrom fdtdx.constraints.module import (\n  ClosestIndex, \n  IndicesToInversePermittivities, \n  StandardToPlusOneMinusOneRange,\n)\n\nbrush_diameter_in_voxels = round(100e-9 / config.resolution)\nmapping = ConstraintMapping(\n  modules=[\n    StandardToPlusOneMinusOneRange(),\n    BrushConstraint2D(\n      brush=circular_brush(diameter=brush_diameter_in_voxels),\n      axis=2,\n    ),\n    IndicesToInversePermittivities(),\n  ]\n)', 'description': 'Example of constraint mapping with minimum feature size constraint.', 'error': False}, {'id': 21, 'type': 'example', 'code': 'from fdtdx.constraints.mapping import ConstraintMapping\nfrom fdtdx.constraints.discrete import (\n  BOTTOM_Z_PADDING_CONFIG_REPEAT, \n  BinaryMedianFilterModule, \n  RemoveFloatingMaterial\n)\nfrom fdtdx.constraints.module import (\n  ClosestIndex, \n  IndicesToInversePermittivities, \n)\n\nbrush_diameter_in_voxels = round(100e-9 / config.resolution)\nmapping = ConstraintMapping(\n  modules=[\n    StandardToInversePermittivityRange(),\n    ClosestIndex(),\n    BinaryMedianFilterModule(\n      kernel_sizes=(5, 5, 5),\n      padding_cfg=BOTTOM_Z_PADDING_CONFIG_REPEAT,\n      num_repeats=2,\n    ),\n    RemoveFloatingMaterial(),\n    IndicesToInversePermittivities(),\n  ],\n)', 'description': 'Example of constraint mapping for Two-Photon Polymerization (2PP).', 'error': False}]