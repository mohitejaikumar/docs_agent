[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.jax.pytrees', 'description': 'PyTree Extensions', 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'extended_autoinit', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.extended_autoinit>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'type': 'function', 'name': 'field', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.field>', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'frozen_field', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.frozen_field>', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'frozen_private_field', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.frozen_private_field>', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 6, 'type': 'class', 'name': 'ExtendedTreeClassIndexer', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.ExtendedTreeClassIndexer>', 'error': False}, {'id': 7, 'module_id': 1, 'class_id': 6, 'docs_id': 7, 'type': 'function', 'name': '__getitem__', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.ExtendedTreeClassIndexer.__getitem__>', 'error': False}, {'id': 8, 'module_id': 1, 'docs_id': 8, 'type': 'class', 'name': 'ExtendedTreeClass', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.ExtendedTreeClass>', 'error': False}, {'id': 9, 'module_id': 1, 'class_id': 8, 'docs_id': 9, 'type': 'function', 'name': 'at', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.ExtendedTreeClass.at>', 'error': False}, {'id': 10, 'module_id': 1, 'class_id': 8, 'docs_id': 10, 'type': 'function', 'name': 'aset', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/<#fdtdx.core.jax.pytrees.ExtendedTreeClass.aset>', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.jax.pytrees', 'description': 'Module containing functions and classes for working with pytrees in FDTD simulations.', 'url': None, 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'frozen_private_field', 'description': 'Creates a field that automatically freezes on set and unfreezes on get, sets the default to None and init to False. This field behaves like a regular pytreeclass field but ensures values are frozen when stored and unfrozen when accessed.', 'signature': 'frozen_private_field(*, default: Any = None, init: bool = False, repr: bool = True, kind: ArgKindType = "POS_OR_KW", metadata: dict[str, Any] | None = None, on_setattr: Sequence[Any] = (), on_getattr: Sequence[Any] = (), alias: str | None = None) -> Any', 'parameters': [{'name': 'default', 'type': 'Any', 'docs_id': 3, 'description': 'The default value for the field', 'default_value': 'None', 'is_optional': True}, {'name': 'init', 'type': 'bool', 'docs_id': 4, 'description': 'Whether to include the field in __init__', 'default_value': 'False', 'is_optional': True}, {'name': 'repr', 'type': 'bool', 'docs_id': 5, 'description': 'Whether to include the field in __repr__', 'default_value': 'True', 'is_optional': True}, {'name': 'kind', 'type': 'ArgKindType', 'docs_id': 6, 'description': 'The argument kind (POS_ONLY, POS_OR_KW, etc.)', 'default_value': "'POS_OR_KW'", 'is_optional': True}, {'name': 'metadata', 'type': 'dict[str, Any] | None', 'docs_id': 7, 'description': 'Additional metadata for the field', 'default_value': 'None', 'is_optional': True}, {'name': 'on_setattr', 'type': 'Sequence[Any]', 'docs_id': 8, 'description': 'Additional setattr callbacks (applied after freezing)', 'default_value': '()', 'is_optional': True}, {'name': 'on_getattr', 'type': 'Sequence[Any]', 'docs_id': 9, 'description': 'Additional getattr callbacks (applied after unfreezing)', 'default_value': '()', 'is_optional': True}, {'name': 'alias', 'type': 'str | None', 'docs_id': 10, 'description': 'Alternative name for the field in __init__', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': None, 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 11, 'type': 'class', 'name': 'ExtendedTreeClassIndexer', 'description': 'Extended indexer for tree class that preserves type information. Extends TreeClassIndexer to properly handle type hints and return Self type.', 'url': None, 'error': False}, {'id': 3, 'module_id': 1, 'class_id': 2, 'docs_id': 12, 'type': 'function', 'name': '__getitem__', 'description': 'Gets item at specified index while preserving type information.', 'signature': '__getitem__(self, where: Any) -> Self', 'parameters': [{'name': 'where', 'type': 'Any', 'docs_id': 13, 'description': 'Index or key to access', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 14, 'type': 'class', 'name': 'ExtendedTreeClass', 'description': 'Extended tree class with improved attribute setting functionality. Extends TreeClass to provide more flexible attribute setting capabilities, particularly for handling non-recursive attribute updates.', 'url': None, 'error': False}, {'id': 5, 'module_id': 1, 'class_id': 4, 'docs_id': 15, 'type': 'property', 'name': 'at', 'description': 'Gets the extended indexer for this tree.', 'signature': 'at: ExtendedTreeClassIndexer', 'parameters': [], 'examples': [], 'url': None, 'error': False}, {'id': 6, 'module_id': 1, 'class_id': 4, 'docs_id': 16, 'type': 'function', 'name': 'aset', 'description': 'Sets an attribute directly without recursive application. Similar to Self.at[attr_name].set(val), but without recursively applying to each tree leaf. Instead, replaces the full attribute with the new value.', 'signature': 'aset(self, attr_name: str, val: Any) -> Self', 'parameters': [{'name': 'attr_name', 'type': 'str', 'docs_id': 17, 'description': 'Name of attribute to set', 'default_value': None, 'is_optional': False}, {'name': 'val', 'type': 'Any', 'docs_id': 18, 'description': 'Value to set the attribute to', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.jax.pytrees', 'description': 'Module containing functions for creating fields that automatically freeze on set and unfreeze on get.', 'url': None, 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'frozen_field', 'description': 'Creates a field that automatically freezes on set and unfreezes on get. This field behaves like a regular pytreeclass field but ensures values are frozen when stored and unfrozen when accessed.', 'signature': 'frozen_field(*, default: Any = NULL, init: bool = True, repr: bool = True, kind: ArgKindType = "POS_OR_KW", metadata: dict[str, Any] | None = None, on_setattr: Sequence[Any] = (), on_getattr: Sequence[Any] = (), alias: str | None = None) -> Any', 'parameters': [{'name': 'default', 'type': 'Any', 'docs_id': 3, 'description': 'The default value for the field', 'default_value': 'NULL', 'is_optional': True}, {'name': 'init', 'type': 'bool', 'docs_id': 4, 'description': 'Whether to include the field in __init__', 'default_value': 'True', 'is_optional': True}, {'name': 'repr', 'type': 'bool', 'docs_id': 5, 'description': 'Whether to include the field in __repr__', 'default_value': 'True', 'is_optional': True}, {'name': 'kind', 'type': 'ArgKindType', 'docs_id': 6, 'description': 'The argument kind (POS_ONLY, POS_OR_KW, etc.)', 'default_value': "'POS_OR_KW'", 'is_optional': True}, {'name': 'metadata', 'type': 'dict[str, Any] | None', 'docs_id': 7, 'description': 'Additional metadata for the field', 'default_value': 'None', 'is_optional': True}, {'name': 'on_setattr', 'type': 'Sequence[Any]', 'docs_id': 8, 'description': 'Additional setattr callbacks (applied after freezing)', 'default_value': '()', 'is_optional': True}, {'name': 'on_getattr', 'type': 'Sequence[Any]', 'docs_id': 9, 'description': 'Additional getattr callbacks (applied after unfreezing)', 'default_value': '()', 'is_optional': True}, {'name': 'alias', 'type': 'str | None', 'docs_id': 10, 'description': 'Alternative name for the field in __init__', 'default_value': 'None', 'is_optional': True}], 'examples': [{'type': 'Creating a frozen field', 'code': 'frozen_field(default=10)', 'description': 'Creates a field with a default value of 10 that will be frozen when set and unfrozen when accessed.'}], 'url': None, 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 11, 'type': 'function', 'name': 'frozen_private_field', 'description': 'Similar to `frozen_field`, but defaults to not being included in `__init__`.', 'signature': 'frozen_private_field(*, default: T, init: bool = False, repr: bool = True, kind: ArgKindType = "POS_OR_KW", metadata: dict[str, Any] | None = None, on_setattr: Sequence[Any] = (), on_getattr: Sequence[Any] = (), alias: str | None = None) -> T', 'parameters': [{'name': 'default', 'type': 'T', 'docs_id': 12, 'description': 'The default value for the field', 'default_value': 'None', 'is_optional': True}, {'name': 'init', 'type': 'bool', 'docs_id': 13, 'description': 'Whether to include the field in __init__', 'default_value': 'False', 'is_optional': True}, {'name': 'repr', 'type': 'bool', 'docs_id': 14, 'description': 'Whether to include the field in __repr__', 'default_value': 'True', 'is_optional': True}, {'name': 'kind', 'type': 'ArgKindType', 'docs_id': 15, 'description': 'The argument kind (POS_ONLY, POS_OR_KW, etc.)', 'default_value': "'POS_OR_KW'", 'is_optional': True}, {'name': 'metadata', 'type': 'dict[str, Any] | None', 'docs_id': 16, 'description': 'Additional metadata for the field', 'default_value': 'None', 'is_optional': True}, {'name': 'on_setattr', 'type': 'Sequence[Any]', 'docs_id': 17, 'description': 'Additional setattr callbacks (applied after freezing)', 'default_value': '()', 'is_optional': True}, {'name': 'on_getattr', 'type': 'Sequence[Any]', 'docs_id': 18, 'description': 'Additional getattr callbacks (applied after unfreezing)', 'default_value': '()', 'is_optional': True}, {'name': 'alias', 'type': 'str | None', 'docs_id': 19, 'description': 'Alternative name for the field in __init__', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': None, 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.jax.pytrees', 'description': 'PyTree Utilities', 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'extended_autoinit', 'description': 'Wrapper around tc.autoinit that preserves parameter requirement information', 'signature': 'extended_autoinit(klass: type[T]) -> type[T]', 'parameters': [{'name': 'klass', 'type': 'type[T]', 'docs_id': 3, 'description': 'The class to initialize.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/#fdtdx.core.jax.pytrees.extended_autoinit', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'field', 'description': 'Creates a field that automatically freezes on set and unfreezes on get. This field behaves like a regular pytreeclass field but ensures values are frozen when stored and unfrozen when accessed.', 'signature': "field(*, default=NULL, init=True, repr=True, kind='POS_OR_KW', metadata=None, on_setattr=(), on_getattr=(), alias=None) -> Any", 'parameters': [{'name': 'default', 'type': 'Any', 'docs_id': 5, 'description': 'The default value for the field', 'default_value': 'NULL', 'is_optional': True}, {'name': 'init', 'type': 'bool', 'docs_id': 6, 'description': 'Whether to include the field in __init__', 'default_value': 'True', 'is_optional': True}, {'name': 'repr', 'type': 'bool', 'docs_id': 7, 'description': 'Whether to include the field in __repr__', 'default_value': 'True', 'is_optional': True}, {'name': 'kind', 'type': 'ArgKindType', 'docs_id': 8, 'description': 'The argument kind (POS_ONLY, POS_OR_KW, etc.)', 'default_value': "'POS_OR_KW'", 'is_optional': True}, {'name': 'metadata', 'type': 'dict[str, Any] | None', 'docs_id': 9, 'description': 'Additional metadata for the field', 'default_value': 'None', 'is_optional': True}, {'name': 'on_setattr', 'type': 'Sequence[Any]', 'docs_id': 10, 'description': 'Additional setattr callbacks (applied after freezing)', 'default_value': '()', 'is_optional': True}, {'name': 'on_getattr', 'type': 'Sequence[Any]', 'docs_id': 11, 'description': 'Additional getattr callbacks (applied after unfreezing)', 'default_value': '()', 'is_optional': True}, {'name': 'alias', 'type': 'str | None', 'docs_id': 12, 'description': 'Alternative name for the field in __init__', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/#fdtdx.core.jax.pytrees.field', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 13, 'type': 'function', 'name': 'frozen_field', 'description': 'Creates a field that automatically freezes on set and unfreezes on get. This field behaves like a regular pytreeclass field but ensures values are frozen when stored and unfrozen when accessed.', 'signature': "frozen_field(*, default=NULL, init=True, repr=True, kind='POS_OR_KW', metadata=None, on_setattr=(), on_getattr=(), alias=None) -> Any", 'parameters': [{'name': 'default', 'type': 'Any', 'docs_id': 14, 'description': 'The default value for the field', 'default_value': 'NULL', 'is_optional': True}, {'name': 'init', 'type': 'bool', 'docs_id': 15, 'description': 'Whether to include the field in __init__', 'default_value': 'True', 'is_optional': True}, {'name': 'repr', 'type': 'bool', 'docs_id': 16, 'description': 'Whether to include the field in __repr__', 'default_value': 'True', 'is_optional': True}, {'name': 'kind', 'type': 'ArgKindType', 'docs_id': 17, 'description': 'The argument kind (POS_ONLY, POS_OR_KW, etc.)', 'default_value': "'POS_OR_KW'", 'is_optional': True}, {'name': 'metadata', 'type': 'dict[str, Any] | None', 'docs_id': 18, 'description': 'Additional metadata for the field', 'default_value': 'None', 'is_optional': True}, {'name': 'on_setattr', 'type': 'Sequence[Any]', 'docs_id': 19, 'description': 'Additional setattr callbacks (applied after freezing)', 'default_value': '()', 'is_optional': True}, {'name': 'on_getattr', 'type': 'Sequence[Any]', 'docs_id': 20, 'description': 'Additional getattr callbacks (applied after unfreezing)', 'default_value': '()', 'is_optional': True}, {'name': 'alias', 'type': 'str | None', 'docs_id': 21, 'description': 'Alternative name for the field in __init__', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/core/pytree/#fdtdx.core.jax.pytrees.frozen_field', 'error': False}]