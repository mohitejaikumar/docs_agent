[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.plotting.device_permittivity_index_utils', 'description': 'Module containing utility functions for visualizing device matrix indices.', 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 1, 'type': 'function', 'name': 'device_matrix_index_figure', 'description': 'Creates a visualization figure of device matrix indices with permittivity configurations.', 'signature': 'device_matrix_index_figure(device_matrix_indices: jax.Array, permittivity_configs: tuple[tuple[str, float], ...]) -> Figure', 'parameters': [{'name': 'device_matrix_indices', 'type': 'jax.Array', 'docs_id': 2, 'description': 'A 3D JAX array containing the device matrix indices. Shape should be (height, width, channels) where channels is typically 1.', 'default_value': None, 'is_optional': False}, {'name': 'permittivity_configs', 'type': 'tuple[tuple[str, float], ...]', 'docs_id': 3, 'description': 'A tuple of (name, value) pairs defining the permittivity configurations, where name is a string identifier (e.g., "Air") and value is the corresponding permittivity value.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.plotting.device_permittivity_index_utils', 'description': 'Module containing utility functions for visualizing device matrix indices with permittivity configurations.', 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 1, 'type': 'function', 'name': 'device_matrix_index_figure', 'description': 'Creates a visualization figure of device matrix indices with permittivity configurations.', 'signature': 'device_matrix_index_figure(device_matrix_indices, permittivity_configs)', 'parameters': [{'name': 'device_matrix_indices', 'type': 'Array', 'docs_id': 1, 'description': 'A 3D JAX array containing the device matrix indices. Shape should be (height, width, channels) where channels is typically 1.', 'default_value': None, 'is_optional': False}, {'name': 'permittivity_configs', 'type': 'tuple[tuple[str, float], ...]', 'docs_id': 1, 'description': 'A tuple of (name, value) pairs defining the permittivity configurations, where name is a string identifier (e.g., "Air") and value is the corresponding permittivity value.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/#fdtdx.core.plotting.device_permittivity_index_utils.device_matrix_index_figure', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.plotting.device_permittivity_index_utils', 'description': 'Module containing utility functions for visualizing device permittivity indices.', 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'index_matrix_to_str', 'description': 'Converts a 2D matrix of indices to a formatted string representation.', 'signature': 'index_matrix_to_str(indices: jax.Array) -> str', 'parameters': [{'name': 'indices', 'type': 'jax.Array', 'docs_id': 3, 'description': 'A 2D JAX array containing numerical indices.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/#fdtdx.core.plotting.device_permittivity_index_utils.index_matrix_to_str', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'device_matrix_index_figure', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/#fdtdx.core.plotting.device_permittivity_index_utils.device_matrix_index_figure', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'plot_filled_std_curves', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/#fdtdx.core.plotting.utils.plot_filled_std_curves', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'generate_unique_filename', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/#fdtdx.core.plotting.debug.generate_unique_filename', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'debug_plot_2d', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/#fdtdx.core.plotting.debug.debug_plot_2d', 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 8, 'type': 'function', 'name': 'colors', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/visualization/#fdtdx.core.plotting.colors', 'error': False}, {'id': 8, 'docs_id': 9, 'type': 'example', 'code': 'def index_matrix_to_str(indices: jax.Array) -> str:\n  """Converts a 2D matrix of indices to a formatted string representation.\n  Args:\n    indices: A 2D JAX array containing numerical indices.\n  Returns:\n    A string representation of the matrix where each row is space-separated\n    and rows are separated by newlines.\n  """\n  indices_str = ""\n  for i in range(indices.shape[0]):\n    for j in range(indices.shape[1]):\n      indices_str += str(indices[i, j].squeeze()) + " "\n    indices_str += "\\n"\n  return indices_str', 'description': 'Example of how to use the index_matrix_to_str function.', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.plotting.utils', 'description': None, 'url': None, 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'plot_filled_std_curves', 'description': 'Plots a curve with filled standard deviation or confidence intervals. Creates a plot showing a mean curve with a filled region representing either standard deviation bounds or custom upper/lower bounds. The filled region uses a lighter color with transparency. The function supports two modes: 1. Standard deviation mode: Provide std parameter to create bounds at mean Â± std 2. Custom bounds mode: Provide explicit upper and lower bound arrays The plotted curves can be optionally clipped to minimum/maximum values.', 'signature': "plot_filled_std_curves(x, mean, color, lighter_color, std=None, upper=None, lower=None, linestyle='-', marker=None, label=None, alpha=0.2, min_val=None, max_val=None)", 'parameters': [{'name': 'x', 'type': 'ndarray', 'docs_id': 3, 'description': 'Array of x-axis values.', 'default_value': None, 'is_optional': False}, {'name': 'mean', 'type': 'ndarray', 'docs_id': 4, 'description': 'Array of y-axis values for the mean curve.', 'default_value': None, 'is_optional': False}, {'name': 'color', 'type': 'Any', 'docs_id': 5, 'description': 'Color for the mean curve line.', 'default_value': None, 'is_optional': False}, {'name': 'lighter_color', 'type': 'Any', 'docs_id': 6, 'description': 'Color for the filled standard deviation region.', 'default_value': None, 'is_optional': False}, {'name': 'std', 'type': 'Optional[ndarray]', 'docs_id': 7, 'description': 'Optional standard deviation array. If provided, used to compute upper/lower bounds.', 'default_value': 'None', 'is_optional': True}, {'name': 'upper', 'type': 'Optional[ndarray]', 'docs_id': 8, 'description': 'Optional array of upper bound values. Must be provided with lower.', 'default_value': 'None', 'is_optional': True}, {'name': 'lower', 'type': 'Optional[ndarray]', 'docs_id': 9, 'description': 'Optional array of lower bound values. Must be provided with upper.', 'default_value': 'None', 'is_optional': True}, {'name': 'linestyle', 'type': 'str', 'docs_id': 10, 'description': "Style of the mean curve line. Defaults to solid line '-'.", 'default_value': "'-'", 'is_optional': True}, {'name': 'marker', 'type': 'Optional[str]', 'docs_id': 11, 'description': 'Optional marker style for data points on the mean curve.', 'default_value': 'None', 'is_optional': True}, {'name': 'label', 'type': 'Optional[str]', 'docs_id': 12, 'description': 'Optional label for the plot legend.', 'default_value': 'None', 'is_optional': True}, {'name': 'alpha', 'type': 'float', 'docs_id': 13, 'description': 'Transparency value for the filled region. Defaults to 0.2.', 'default_value': '0.2', 'is_optional': True}, {'name': 'min_val', 'type': 'Optional[float]', 'docs_id': 14, 'description': 'Optional minimum value to clip the curves.', 'default_value': 'None', 'is_optional': True}, {'name': 'max_val', 'type': 'Optional[float]', 'docs_id': 15, 'description': 'Optional maximum value to clip the curves.', 'default_value': 'None', 'is_optional': True}], 'examples': [{'type': 'plotting standard deviation curves', 'code': ">>> x = np.linspace(0, 10, 100)\n>>> mean = np.sin(x)\n>>> std = 0.1 * np.ones_like(x)\n>>> plot_filled_std_curves(x, mean, 'blue', 'lightblue', std=std)", 'description': None}], 'url': None, 'error': False}, {'id': 3, 'module_id': 4, 'docs_id': 16, 'type': 'module', 'name': 'fdtdx.core.plotting.debug', 'description': None, 'url': None, 'error': False}, {'id': 4, 'module_id': 4, 'docs_id': 17, 'type': 'function', 'name': 'generate_unique_filename', 'description': 'Generate a unique filename using timestamp and UUID.', 'signature': "generate_unique_filename(prefix='file', extension=None)", 'parameters': [{'name': 'prefix', 'type': 'str', 'docs_id': 18, 'description': 'Prefix for the filename', 'default_value': "'file'", 'is_optional': True}, {'name': 'extension', 'type': 'str', 'docs_id': 19, 'description': 'File extension (without dot)', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': None, 'error': False}, {'id': 5, 'module_id': 4, 'docs_id': 20, 'type': 'function', 'name': 'debug_plot_2d', 'description': 'Creates a debug visualization of a 2D array and saves it to disk. This function is useful for debugging array values during development and testing. It creates a heatmap visualization with optional value annotations and automatically saves it to a specified directory.', 'signature': "debug_plot_2d(array, cmap='viridis', show_values=False, tmp_dir='outputs/tmp/debug', filename=None)", 'parameters': [{'name': 'array', 'type': 'ndarray | Array', 'docs_id': 21, 'description': 'The 2D array to visualize. Can be either a numpy array or JAX array.', 'default_value': None, 'is_optional': False}, {'name': 'cmap', 'type': 'str', 'docs_id': 22, 'description': 'The matplotlib colormap to use for the visualization. Defaults to "viridis".', 'default_value': "'viridis'", 'is_optional': True}, {'name': 'show_values', 'type': 'bool', 'docs_id': 23, 'description': 'If True, overlays the numerical values on each cell. Defaults to False.', 'default_value': 'False', 'is_optional': True}, {'name': 'tmp_dir', 'type': 'str | Path', 'docs_id': 24, 'description': 'Directory where the plot will be saved. Will be created if it doesn\'t exist. Defaults to "outputs/tmp/debug".', 'default_value': "'outputs/tmp/debug'", 'is_optional': True}, {'name': 'filename', 'type': 'str | None', 'docs_id': 25, 'description': 'Name for the output file. If None, generates a unique name using timestamp. The .png extension will be added automatically.', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': None, 'error': False}, {'id': 6, 'docs_id': 26, 'type': 'module', 'name': 'fdtdx.core.plotting.colors', 'description': 'Color constants for visualization and plotting. This module provides a collection of predefined RGB color tuples normalized to the range [0,1]. Colors are organized into categories: primary/bright colors, grayscale, and earth tones. These colors are designed to provide a consistent and visually appealing palette for plotting and visualization tasks throughout the FDTDX framework. Each color is defined as a tuple of (red, green, blue) values normalized to [0,1]. The normalization is done by dividing 8-bit RGB values (0-255) by 255.', 'url': None, 'error': False}]