[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.conversion', 'description': 'Module containing functions for file conversion.', 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/', 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 1, 'type': 'function', 'name': 'load_stl', 'description': 'Loads an STL file and converts it to a voxelized permittivity array.', 'signature': 'load_stl(stl: str | trimesh.Trimesh, permittivity: float, target_shape: tuple[int, int, int], voxel_size: float, ambient_permittivity: float = 1.0) -> jax.Array', 'parameters': [{'name': 'stl', 'type': 'str | Trimesh', 'docs_id': 1, 'description': 'Path to an STL file or a trimesh.Trimesh object containing the mesh', 'default_value': None, 'is_optional': False}, {'name': 'permittivity', 'type': 'float', 'docs_id': 2, 'description': 'Relative permittivity value for the object', 'default_value': None, 'is_optional': False}, {'name': 'target_shape', 'type': 'tuple[int, int, int]', 'docs_id': 3, 'description': 'Desired output shape as (nx, ny, nz)', 'default_value': None, 'is_optional': False}, {'name': 'voxel_size', 'type': 'float', 'docs_id': 4, 'description': 'Size of each voxel in the initial voxelization', 'default_value': None, 'is_optional': False}, {'name': 'ambient_permittivity', 'type': 'float', 'docs_id': 5, 'description': 'Relative permittivity value for the surrounding medium (default: 1.0)', 'default_value': '1.0', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/#fdtdx.core.conversion.load_stl.load_stl', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.conversion.load_stl', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.load_stl.load_stl>', 'error': False}, {'id': 2, 'docs_id': 2, 'type': 'function', 'name': 'load_stl', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.load_stl.load_stl>', 'error': False}, {'id': 3, 'docs_id': 3, 'type': 'module', 'name': 'fdtdx.core.conversion.export', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.export.export_stl>', 'error': False}, {'id': 4, 'docs_id': 4, 'type': 'function', 'name': 'export_stl', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.export.export_stl>', 'error': False}, {'id': 5, 'docs_id': 5, 'type': 'function', 'name': 'idx_to_xyz', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.export.idx_to_xyz>', 'error': False}, {'id': 6, 'docs_id': 6, 'type': 'function', 'name': 'xyz_to_idx', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.export.xyz_to_idx>', 'error': False}, {'id': 7, 'docs_id': 7, 'type': 'module', 'name': 'fdtdx.core.conversion.import_utils', 'description': None, 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.import_utils.gds_to_numpy>', 'error': False}, {'id': 8, 'docs_id': 8, 'type': 'function', 'name': 'gds_to_numpy', 'description': None, 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/<#fdtdx.core.conversion.import_utils.gds_to_numpy>', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.core.conversion.export', 'description': None, 'url': None, 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'export_stl', 'description': 'Export a 3D boolean matrix to an STL file. Converts a 3D boolean matrix into a mesh representation and saves it as an STL file. True values in the matrix are converted to solid voxels in the output mesh.', 'signature': 'export_stl(matrix, stl_filename, voxel_grid_size=(1, 1, 1))', 'parameters': [{'name': 'matrix', 'type': 'ndarray', 'docs_id': 3, 'description': '3D boolean numpy array representing the voxel grid.', 'default_value': None, 'is_optional': False}, {'name': 'stl_filename', 'type': 'Path | str', 'docs_id': 4, 'description': 'Output STL file path.', 'default_value': None, 'is_optional': False}, {'name': 'voxel_grid_size', 'type': 'tuple[int, int, int]', 'docs_id': 5, 'description': 'Physical size of each voxel as (x, y, z) integers. Defaults to (1, 1, 1).', 'default_value': '(1, 1, 1)', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/#fdtdx.core.conversion.export.export_stl', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'idx_to_xyz', 'description': 'Convert flattened array indices to 3D coordinates.', 'signature': 'idx_to_xyz(idx, shape)', 'parameters': [{'name': 'idx', 'type': 'ndarray', 'docs_id': 7, 'description': 'Array of flattened indices.', 'default_value': None, 'is_optional': False}, {'name': 'shape', 'type': 'tuple[int, int, int]', 'docs_id': 8, 'description': '3D shape tuple (d0, d1, d2) of the original array.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/#fdtdx.core.conversion.export.idx_to_xyz', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 9, 'type': 'function', 'name': 'xyz_to_idx', 'description': 'Convert 3D coordinates to flattened array indices. This is the inverse operation of idx_to_xyz(). Used for converting physical coordinates back to array indices.', 'signature': 'xyz_to_idx(x, y, z, shape)', 'parameters': [{'name': 'x', 'type': 'ndarray', 'docs_id': 10, 'description': 'Array of x coordinates.', 'default_value': None, 'is_optional': False}, {'name': 'y', 'type': 'ndarray', 'docs_id': 11, 'description': 'Array of y coordinates.', 'default_value': None, 'is_optional': False}, {'name': 'z', 'type': 'ndarray', 'docs_id': 12, 'description': 'Array of z coordinates.', 'default_value': None, 'is_optional': False}, {'name': 'shape', 'type': 'tuple[int, int, int]', 'docs_id': 13, 'description': '3D shape tuple (d0, d1, d2) of the target array.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/#fdtdx.core.conversion.export.xyz_to_idx', 'error': False}, {'id': 2, 'docs_id': 14, 'type': 'module', 'name': 'fdtdx.core.conversion.import_utils', 'description': None, 'url': None, 'error': False}, {'id': 4, 'module_id': 2, 'docs_id': 15, 'type': 'function', 'name': 'gds_to_numpy', 'description': 'Converts GDSII geometry on a specific layer to a grid-based mask.', 'signature': 'gds_to_numpy(file_path, resolution, layer, datatype=None)', 'parameters': [{'name': 'file_path', 'type': 'str | Path', 'docs_id': 16, 'description': 'Path to the GDSII file', 'default_value': None, 'is_optional': False}, {'name': 'resolution', 'type': 'float', 'docs_id': 17, 'description': 'The size of each grid cell in the same units as the GDSII coordinates', 'default_value': None, 'is_optional': False}, {'name': 'layer', 'type': 'int', 'docs_id': 18, 'description': 'The GDSII layer number to extract', 'default_value': None, 'is_optional': False}, {'name': 'datatype', 'type': 'int | None', 'docs_id': 19, 'description': 'The GDSII datatype number to extract. Defaults to layer value.', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/utils/conversion/#fdtdx.core.conversion.import_utils.gds_to_numpy', 'error': False}]