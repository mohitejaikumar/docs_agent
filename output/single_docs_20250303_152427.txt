[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.discrete', 'description': 'Module containing functions for discrete constraints in FDTD simulations.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 1, 'type': 'function', 'name': 'circular_brush', 'description': 'Creates a circular binary mask/brush for morphological operations.', 'signature': 'circular_brush(diameter: float, size: int | None = None) -> jax.Array', 'parameters': [{'name': 'diameter', 'type': 'float', 'docs_id': 2, 'description': 'Diameter of the circle in grid units.', 'default_value': None, 'is_optional': False}, {'name': 'size', 'type': 'int | None', 'docs_id': 3, 'description': 'Optional size of the output array. If None, uses ceil(diameter) rounded up to next odd number.', 'default_value': 'None', 'is_optional': True}], 'examples': [{'type': 'Creating a circular brush', 'code': 'import jax.numpy as jnp\nfrom fdtdx.constraints.discrete import circular_brush\n\n# Create a circular brush with diameter 5\nbrush = circular_brush(diameter=5)\nprint(brush)\n\n# Create a circular brush with diameter 5 and size 11\nbrush = circular_brush(diameter=5, size=11)\nprint(brush)', 'description': 'This example shows how to create a circular brush using the `circular_brush` function.  The first example uses the default size calculation, while the second explicitly sets the size.'}], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/<#fdtdx.constraints.discrete.circular_brush>', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'function', 'name': 'transform', 'description': 'Transforms input parameters by removing floating material regions.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.RemoveFloatingMaterial.transform', 'parameters': [{'name': 'input_params', 'type': 'dict[str, Array]', 'docs_id': 2, 'description': 'Dictionary mapping parameter names to their values as JAX arrays. Expected to contain a single array with material indices.', 'default_value': '_required_', 'is_optional': False}], 'examples': [], 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 3, 'type': 'class', 'name': 'ConnectHolesAndStructures', 'description': 'Connects floating polymer regions and ensures air holes connect to outside. This constraint module ensures physical realizability of designs by: 1. Either connecting floating polymer regions to the substrate or removing them 2. Ensuring all air holes are connected to the outside (no trapped air) The bottom (lower z) is treated as the substrate reference.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.ConnectHolesAndStructures', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'input_interface', 'description': None, 'url': None, 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 5, 'description': None, 'default_value': None, 'is_optional': False}], 'examples': [], 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'transform', 'description': None, 'url': None, 'parameters': [{'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 7, 'description': None, 'default_value': None, 'is_optional': False}], 'examples': [], 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.discrete', 'description': 'Discrete Constraints', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'class', 'name': 'RemoveFloatingMaterial', 'description': 'Finds all material that floats in the air and sets their permittivity to air. This constraint module identifies regions of material that are not connected to any substrate or boundary and converts them to air. This helps ensure physically realizable designs by eliminating floating/disconnected material regions. The module only works with binary material systems (2 permittivities) where one material represents air.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.RemoveFloatingMaterial', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'class_id': 2, 'name': 'transform', 'type': 'function', 'description': 'Transforms input parameters by removing floating material regions.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 4, 'description': 'Dictionary mapping parameter names to their values as JAX arrays. Expected to contain a single array with material indices.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.RemoveFloatingMaterial.transform', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 5, 'class_id': 2, 'name': 'input_interface', 'type': 'function', 'description': 'Validates and processes the input interface specification.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 6, 'description': 'Interface specification from the next module in the chain.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.RemoveFloatingMaterial.input_interface', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.discrete', 'description': 'Discrete constraints for FDTD simulations.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'class', 'name': 'RemoveFloatingMaterial', 'description': 'Removes floating materials from a binary structure.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.RemoveFloatingMaterial', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'type': 'function', 'name': 'input_interface', 'description': 'Input interface for RemoveFloatingMaterial.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.RemoveFloatingMaterial.input_interface', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 4, 'type': 'function', 'name': 'transform', 'description': 'Transform function for RemoveFloatingMaterial.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.RemoveFloatingMaterial.transform', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 5, 'type': 'class', 'name': 'ConnectHolesAndStructures', 'description': 'Connects holes and structures in a binary structure.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.ConnectHolesAndStructures', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'circular_brush', 'description': 'Applies a circular brush to a binary structure.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.circular_brush', 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 7, 'type': 'class', 'name': 'BrushConstraint2D', 'description': '2D brush constraint.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.BrushConstraint2D', 'error': False}, {'id': 8, 'module_id': 1, 'docs_id': 8, 'type': 'class', 'name': 'BinaryMedianFilterModule', 'description': 'Applies a binary median filter.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.BinaryMedianFilterModule', 'error': False}, {'id': 9, 'module_id': 1, 'docs_id': 9, 'type': 'enum', 'name': 'BOTTOM_Z_PADDING_CONFIG', 'description': 'Configuration for bottom z-padding.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.BOTTOM_Z_PADDING_CONFIG', 'error': False}, {'id': 10, 'module_id': 1, 'docs_id': 10, 'type': 'enum', 'name': 'BOTTOM_Z_PADDING_CONFIG_REPEAT', 'description': 'Configuration for bottom z-padding with repeat.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.BOTTOM_Z_PADDING_CONFIG_REPEAT', 'error': False}, {'id': 11, 'module_id': 1, 'docs_id': 11, 'type': 'class', 'name': 'PillarMapping', 'description': 'Mapping for pillar constraints.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping', 'error': False}, {'id': 12, 'module_id': 1, 'docs_id': 12, 'type': 'function', 'name': 'init_module', 'description': 'Initialization module for PillarMapping.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping.init_module', 'error': False}, {'id': 13, 'module_id': 1, 'docs_id': 13, 'type': 'function', 'name': 'input_interface', 'description': 'Input interface for PillarMapping.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping.input_interface', 'error': False}, {'id': 14, 'module_id': 1, 'docs_id': 14, 'type': 'function', 'name': 'transform', 'description': 'Transform function for PillarMapping.', 'signature': None, 'parameters': [], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping.transform', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'class', 'name': 'BrushConstraint2D', 'description': 'Applies 2D brush-based constraints to ensure minimum feature sizes. Implements the brush-based constraint method described in: https://pubs.acs.org/doi/10.1021/acsphotonics.2c00313 This ensures minimum feature sizes and connectivity in 2D designs by using morphological operations with a brush kernel.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.BrushConstraint2D', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'transform', 'description': 'Applies the 2D brush constraint to the input parameters.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'self', 'type': None, 'docs_id': 3, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 4, 'description': 'Input parameters.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': '_generator', 'description': 'The core function that implements the brush-based constraint algorithm.', 'signature': '_generator(self, arr: jax.Array) -> jax.Array', 'parameters': [{'name': 'self', 'type': None, 'docs_id': 6, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'arr', 'type': 'jax.Array', 'docs_id': 7, 'description': 'Input array.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 8, 'type': 'function', 'name': 'input_interface', 'description': 'Checks the input interface and raises exceptions if the input is not compatible with the constraint.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'self', 'type': None, 'docs_id': 9, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 10, 'description': 'Output interface.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.discrete', 'description': 'Module containing discrete constraints for FDTD simulations.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'class', 'name': 'BinaryMedianFilterModule', 'description': 'Performs 3D binary median filtering on the design. Applies a 3D median filter to smooth and clean up binary material distributions. This helps remove small features and noise while preserving larger structures.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/<#fdtdx.constraints.discrete.BinaryMedianFilterModule>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 3, 'type': 'function', 'name': 'input_interface', 'description': 'Defines the input interface for the BinaryMedianFilterModule.', 'signature': 'input_interface(self, output_interface: ConstraintInterface) -> ConstraintInterface', 'parameters': [{'name': 'self', 'type': None, 'docs_id': 4, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 5, 'description': None, 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'transform', 'description': 'Applies the binary median filter to the input parameters.', 'signature': 'transform(self, input_params: dict[str, jax.Array]) -> dict[str, jax.Array]', 'parameters': [{'name': 'self', 'type': None, 'docs_id': 7, 'description': None, 'default_value': None, 'is_optional': False}, {'name': 'input_params', 'type': 'dict[str, jax.Array]', 'docs_id': 8, 'description': None, 'default_value': None, 'is_optional': False}], 'examples': [], 'url': None, 'error': False}, {'id': 5, 'module_id': None, 'docs_id': 9, 'type': 'function', 'name': 'binary_median_filter', 'description': 'Applies a 3D binary median filter.', 'signature': None, 'parameters': [], 'examples': [], 'url': None, 'error': False}, {'id': 6, 'module_id': None, 'docs_id': 10, 'type': 'function', 'name': 'straight_through_estimator', 'description': 'Applies a straight-through estimator.', 'signature': None, 'parameters': [], 'examples': [], 'url': None, 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module-attribute', 'name': 'BOTTOM_Z_PADDING_CONFIG', 'description': "PaddingConfig(modes=('constant', 'constant', 'constant', 'constant', 'constant', 'constant'), widths=(10), values=(1, 0, 1, 1, 1, 0))", 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.BOTTOM_Z_PADDING_CONFIG', 'error': False}, {'id': 2, 'docs_id': 2, 'type': 'module-attribute', 'name': 'BOTTOM_Z_PADDING_CONFIG_REPEAT', 'description': "PaddingConfig(modes=('edge', 'edge', 'edge', 'edge', 'constant', 'edge'), widths=(20), values=(1))", 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.discrete.BOTTOM_Z_PADDING_CONFIG_REPEAT', 'error': False}, {'id': 3, 'module_id': 3, 'docs_id': 3, 'type': 'class', 'name': 'PillarMapping', 'description': 'Constraint module for mapping pillar structures to allowed configurations. Maps arbitrary pillar structures to the nearest allowed configurations based on material constraints and geometry requirements. Ensures structures meet fabrication rules like single polymer columns and no trapped air holes.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping', 'error': False}, {'id': 4, 'module_id': 3, 'docs_id': 4, 'type': 'function', 'name': 'init_module', 'description': 'Initialize the pillar mapping module. Sets up allowed index combinations based on material constraints and geometry requirements. Computes valid pillar configurations that satisfy fabrication rules.', 'signature': 'init_module(config, permittivity_config, output_interface)', 'parameters': [{'name': 'config', 'type': 'SimulationConfig', 'docs_id': 5, 'description': 'Global simulation configuration.', 'default_value': '_required_', 'is_optional': False}, {'name': 'permittivity_config', 'type': 'dict[str, float]', 'docs_id': 6, 'description': 'Material permittivity configurations.', 'default_value': '_required_', 'is_optional': False}, {'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 7, 'description': 'Interface specification from previous module.', 'default_value': '_required_', 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping.init_module', 'error': False}, {'id': 5, 'module_id': 3, 'docs_id': 8, 'type': 'function', 'name': 'input_interface', 'description': 'Define input interface requirements for this constraint module.', 'signature': 'input_interface(output_interface)', 'parameters': [{'name': 'output_interface', 'type': 'ConstraintInterface', 'docs_id': 9, 'description': 'Interface specification from previous module.', 'default_value': '_required_', 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping.input_interface', 'error': False}, {'id': 6, 'module_id': 3, 'docs_id': 10, 'type': 'function', 'name': 'transform', 'description': 'Transform input parameters to satisfy pillar constraints. Maps arbitrary material distributions to nearest allowed pillar configurations using straight-through estimation for gradient computation.', 'signature': 'transform(input_params)', 'parameters': [{'name': 'input_params', 'type': 'dict[str, Array]', 'docs_id': 11, 'description': 'Dictionary of input parameter arrays.', 'default_value': '_required_', 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/discrete/#fdtdx.constraints.pillars.PillarMapping.transform', 'error': False}, {'id': 7, 'docs_id': 12, 'type': 'doc', 'description': 'API reference for discrete constraints in fdtdx.', 'url': None, 'error': False}]