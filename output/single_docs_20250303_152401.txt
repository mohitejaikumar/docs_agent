[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.binary_transform', 'description': 'Module containing functions for binary transformations in FDTD simulations.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 1, 'type': 'function', 'name': 'compute_air_connection', 'description': 'Computes a mask of air regions connected to the boundaries. Uses iterative dilation to identify air regions (zeros in the matrix) that are connected to the simulation boundaries. This is used to ensure proper ventilation in the structure.', 'signature': 'compute_air_connection(matrix: jax.Array) -> jax.Array', 'parameters': [{'name': 'matrix', 'type': 'jax.Array', 'docs_id': 1, 'description': 'Binary array where 1 represents polymer and 0 represents air.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.compute_air_connection>', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.binary_transform', 'description': 'Module containing functions for binary image processing.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/', 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'binary_median_filter', 'description': 'Applies a binary median filter to a 3D array. Implements a median filter for binary data by using convolution and thresholding. The filter is applied separately along each axis using the specified kernel sizes.', 'signature': 'binary_median_filter(arr_3d: jax.Array, kernel_sizes: tuple[int, int, int], padding_cfg: PaddingConfig) -> jax.Array', 'parameters': [{'name': 'arr_3d', 'type': 'Array', 'docs_id': 3, 'description': '3D binary input array.', 'default_value': None, 'is_optional': False}, {'name': 'kernel_sizes', 'type': 'tuple[int, int, int]', 'docs_id': 4, 'description': 'Tuple of (kx, ky, kz) specifying filter size in each dimension.', 'default_value': None, 'is_optional': False}, {'name': 'padding_cfg', 'type': 'PaddingConfig', 'docs_id': 5, 'description': 'Configuration for padding the input array.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.binary_median_filter>', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 6, 'type': 'function', 'name': 'compute_polymer_connection', 'description': 'Computes a mask of polymer regions connected to specified points. Uses iterative dilation to identify polymer regions (ones in the matrix) that are connected either to the bottom layer or to specified points in connected_slice.', 'signature': 'compute_polymer_connection(matrix: jax.Array, connected_slice: tuple[int | None, int | None, int | None] | None = None) -> jax.Array', 'parameters': [{'name': 'matrix', 'type': 'Array', 'docs_id': 7, 'description': 'Binary array where 1 represents polymer and 0 represents air.', 'default_value': None, 'is_optional': False}, {'name': 'connected_slice', 'type': 'tuple[int | None, int | None, int | None] | None', 'docs_id': 8, 'description': 'Optional tuple of indices specifying starting points for the connection computation. If None, uses bottom layer.', 'default_value': 'None', 'is_optional': True}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.compute_polymer_connection>', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.binary_transform', 'description': 'Module containing functions for binary image transformations.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'dilate_jax', 'description': 'Performs morphological dilation on a binary image using JAX.', 'signature': 'dilate_jax(image: jax.Array, kernel: jax.Array) -> jax.Array', 'parameters': [{'name': 'image', 'type': 'jax.Array', 'docs_id': 3, 'description': 'Binary input array to be dilated.', 'default_value': None, 'is_optional': False}, {'name': 'kernel', 'type': 'jax.Array', 'docs_id': 4, 'description': 'Binary kernel defining the dilation shape.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/#fdtdx.constraints.binary_transform.dilate_jax', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'erode_jax', 'description': 'Performs morphological erosion on a binary image using JAX.', 'signature': 'erode_jax(image: jax.Array, kernel: jax.Array) -> jax.Array', 'parameters': [{'name': 'image', 'type': 'jax.Array', 'docs_id': 6, 'description': 'Binary input array to be eroded.', 'default_value': None, 'is_optional': False}, {'name': 'kernel', 'type': 'jax.Array', 'docs_id': 7, 'description': 'Binary kernel defining the erosion shape.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/#fdtdx.constraints.binary_transform.erode_jax', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 8, 'type': 'function', 'name': 'seperated_3d_dilation', 'description': 'Performs separated 3D dilation along each axis plane. Applies 2D dilation kernels separately in the XY, YZ, and XZ planes to approximate 3D dilation while being more computationally efficient. The result is masked by the reduction array after each operation.', 'signature': 'seperated_3d_dilation(arr_3d: jax.Array, kernel_xy: jax.Array, kernel_yz: jax.Array, kernel_xz: jax.Array, reduction_arr: jax.Array) -> jax.Array', 'parameters': [{'name': 'arr_3d', 'type': 'jax.Array', 'docs_id': 9, 'description': '3D binary array to be dilated.', 'default_value': None, 'is_optional': False}, {'name': 'kernel_xy', 'type': 'jax.Array', 'docs_id': 10, 'description': '2D kernel for XY plane dilation.', 'default_value': None, 'is_optional': False}, {'name': 'kernel_yz', 'type': 'jax.Array', 'docs_id': 11, 'description': '2D kernel for YZ plane dilation.', 'default_value': None, 'is_optional': False}, {'name': 'kernel_xz', 'type': 'jax.Array', 'docs_id': 12, 'description': '2D kernel for XZ plane dilation.', 'default_value': None, 'is_optional': False}, {'name': 'reduction_arr', 'type': 'jax.Array', 'docs_id': 13, 'description': 'Binary mask to constrain dilation results.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/#fdtdx.constraints.binary_transform.seperated_3d_dilation', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.binary_transform', 'description': 'Module containing functions for binary transformation in FDTD simulations.', 'error': False}, {'id': 1, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'connect_slice', 'description': 'Connects polymer regions between adjacent slices. Attempts to connect disconnected polymer regions between three adjacent z-slices by modifying the middle and upper slices while preserving specified connection points.', 'signature': 'connect_slice(lower_slice: jax.Array, middle_slice: jax.Array, upper_slice: jax.Array, upper_save_points: jax.Array) -> tuple[jax.Array, jax.Array]', 'parameters': [{'name': 'lower_slice', 'type': 'jax.Array', 'docs_id': 3, 'description': 'Binary array representing the lower z-slice.', 'default_value': None, 'is_optional': False}, {'name': 'middle_slice', 'type': 'jax.Array', 'docs_id': 4, 'description': 'Binary array representing the middle z-slice to be optimized.', 'default_value': None, 'is_optional': False}, {'name': 'upper_slice', 'type': 'jax.Array', 'docs_id': 5, 'description': 'Binary array representing the upper z-slice to be optimized.', 'default_value': None, 'is_optional': False}, {'name': 'upper_save_points', 'type': 'jax.Array', 'docs_id': 6, 'description': 'Boolean mask of points in upper slice that must remain connected.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/#fdtdx.constraints.binary_transform.connect_slice', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 7, 'type': 'function', 'name': 'remove_floating_polymer', 'description': 'Removes polymer regions that are not connected to the substrate. Uses flood-fill algorithm to identify polymer regions connected to the bottom layer and removes any floating polymer regions that are not connected.', 'signature': 'remove_floating_polymer(matrix: jax.Array) -> jax.Array', 'parameters': [{'name': 'matrix', 'type': 'jax.Array', 'docs_id': 8, 'description': 'Binary array where 1 represents polymer and 0 represents air. Shape is (x, y, z) representing the 3D grid.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/#fdtdx.constraints.binary_transform.remove_floating_polymer', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 9, 'type': 'function', 'name': 'remove_polymer_non_connected_to_x_max_middle', 'description': 'Removes polymer regions not connected to the middle of the x-max boundary. Uses flood-fill algorithm starting from the middle point of the x-max boundary to identify connected polymer regions and removes unconnected regions.', 'signature': 'remove_polymer_non_connected_to_x_max_middle(matrix: jax.Array) -> jax.Array', 'parameters': [{'name': 'matrix', 'type': 'jax.Array', 'docs_id': 10, 'description': 'Binary array where 1 represents polymer and 0 represents air. Shape is (x, y, z) representing the 3D grid.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/#fdtdx.constraints.binary_transform.remove_polymer_non_connected_to_x_max_middle', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 11, 'type': 'function', 'name': 'connect_holes_and_structures', 'description': 'Connects disconnected polymer structures and air holes in the matrix. Performs a two-pass algorithm: 1. Connects disconnected polymer structures by adding polymer material 2. Connects disconnected air regions by removing polymer material This ensures both structural integrity and proper air ventilation.', 'signature': 'connect_holes_and_structures(matrix: jax.Array) -> jax.Array', 'parameters': [{'name': 'matrix', 'type': 'jax.Array', 'docs_id': 12, 'description': 'Binary array where 1 represents polymer and 0 represents air. Shape is (x, y, z) representing the 3D grid.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/#fdtdx.constraints.binary_transform.connect_holes_and_structures', 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx.constraints.binary_transform', 'description': 'Module containing functions for binary image transformations.', 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/', 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 2, 'type': 'function', 'name': 'dilate_jax', 'description': 'Dilates a binary image using JAX.', 'signature': 'dilate_jax(image, structure)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 3, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}, {'name': 'structure', 'type': 'array', 'docs_id': 4, 'description': 'Structuring element for dilation.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.dilate_jax>', 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 5, 'type': 'function', 'name': 'erode_jax', 'description': 'Erodes a binary image using JAX.', 'signature': 'erode_jax(image, structure)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 6, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}, {'name': 'structure', 'type': 'array', 'docs_id': 7, 'description': 'Structuring element for erosion.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.erode_jax>', 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 8, 'type': 'function', 'name': 'seperated_3d_dilation', 'description': 'Performs 3D dilation separately along each axis.', 'signature': 'seperated_3d_dilation(image, structure)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 9, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}, {'name': 'structure', 'type': 'array', 'docs_id': 10, 'description': 'Structuring element for dilation.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.seperated_3d_dilation>', 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 11, 'type': 'function', 'name': 'binary_median_filter', 'description': 'Applies a binary median filter to an image.', 'signature': 'binary_median_filter(image, size)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 12, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}, {'name': 'size', 'type': 'int', 'docs_id': 13, 'description': 'Size of the filter kernel.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.binary_median_filter>', 'error': False}, {'id': 6, 'module_id': 1, 'docs_id': 14, 'type': 'function', 'name': 'compute_polymer_connection', 'description': 'Computes the connectivity of polymer regions.', 'signature': 'compute_polymer_connection(image)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 15, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.compute_polymer_connection>', 'error': False}, {'id': 7, 'module_id': 1, 'docs_id': 16, 'type': 'function', 'name': 'compute_air_connection', 'description': 'Computes the connectivity of air regions.', 'signature': 'compute_air_connection(image)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 17, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.compute_air_connection>', 'error': False}, {'id': 8, 'module_id': 1, 'docs_id': 18, 'type': 'function', 'name': 'connect_slice', 'description': 'Connects structures within a slice of an image.', 'signature': 'connect_slice(image)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 19, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.connect_slice>', 'error': False}, {'id': 9, 'module_id': 1, 'docs_id': 20, 'type': 'function', 'name': 'remove_floating_polymer', 'description': 'Removes floating polymer structures.', 'signature': 'remove_floating_polymer(image)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 21, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.remove_floating_polymer>', 'error': False}, {'id': 10, 'module_id': 1, 'docs_id': 22, 'type': 'function', 'name': 'remove_polymer_non_connected_to_x_max_middle', 'description': 'Removes polymer structures not connected to the middle of the x-max.', 'signature': 'remove_polymer_non_connected_to_x_max_middle(image)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 23, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.remove_polymer_non_connected_to_x_max_middle>', 'error': False}, {'id': 11, 'module_id': 1, 'docs_id': 24, 'type': 'function', 'name': 'connect_holes_and_structures', 'description': 'Connects holes and structures in a binary image.', 'signature': 'connect_holes_and_structures(image)', 'parameters': [{'name': 'image', 'type': 'array', 'docs_id': 25, 'description': 'Binary input image.', 'default_value': None, 'is_optional': False}], 'examples': [], 'url': 'https://ymahlau.github.io/fdtdx/api/constraints/binary/<#fdtdx.constraints.binary_transform.connect_holes_and_structures>', 'error': False}]