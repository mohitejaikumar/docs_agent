[{'id': 1, 'docs_id': 1, 'type': 'module', 'name': 'fdtdx', 'description': 'This module provides functionalities for FDTD simulations.', 'url': None, 'error': False}, {'id': 2, 'module_id': 1, 'docs_id': 1, 'type': 'class', 'name': 'SimulationConfig', 'description': 'Configuration class for FDTD simulations.  Sets parameters like simulation time and resolution.', 'url': None, 'error': False}, {'id': 3, 'module_id': 1, 'docs_id': 1, 'type': 'class', 'name': 'SimulationVolume', 'description': "Defines the simulation volume's size.", 'url': None, 'error': False}, {'id': 4, 'module_id': 1, 'docs_id': 1, 'type': 'function', 'name': 'place_objects', 'description': 'Computes the actual position of objects in the simulation scene by resolving constraints.', 'signature': 'place_objects(volume, config, constraints, key)', 'parameters': [{'name': 'volume', 'type': 'SimulationVolume', 'docs_id': 1, 'description': 'The simulation volume.', 'default_value': None, 'is_optional': False}, {'name': 'config', 'type': 'SimulationConfig', 'docs_id': 1, 'description': 'Simulation configuration.', 'default_value': None, 'is_optional': False}, {'name': 'constraints', 'type': 'list', 'docs_id': 1, 'description': 'List of constraints between objects.', 'default_value': '[]', 'is_optional': False}, {'name': 'key', 'type': 'jax.random.PRNGKey', 'docs_id': 1, 'description': 'Random key for random number generation.', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Defining and placing objects in a simulation volume', 'code': '# create a simulation config\nconfig = SimulationConfig(\n  time=200e-15,\n  resolution=100e-9\n)\n# Create a simulation volume\nvolume = SimulationVolume(\n  partial_real_shape=(4e-6, 4e-6, 1.5e-6),\n)\nkey = jax.random.PRNGKey(seed=42) # random key\n# place objects and resolve constraints\nobjects, arrays, params, config, info = place_objects(\n  volume=volume,\n  config=config,\n  constraints=[],\n  key=key,\n)\n# plot the simulation scene\nfig = plot_setup(\n  config=config,\n  objects=objects,\n)\nfig.savefig("empty_scene.png")', 'description': 'This example shows how to create a simulation configuration, define a simulation volume, and place objects within it using the `place_objects` function.  The resulting scene is then plotted and saved as an image.'}], 'url': None, 'error': False}, {'id': 5, 'module_id': 1, 'docs_id': 1, 'type': 'function', 'name': 'plot_setup', 'description': 'Plots the simulation scene.', 'signature': 'plot_setup(config, objects)', 'parameters': [{'name': 'config', 'type': 'SimulationConfig', 'docs_id': 1, 'description': 'Simulation configuration.', 'default_value': None, 'is_optional': False}, {'name': 'objects', 'type': 'list', 'docs_id': 1, 'description': 'List of objects in the simulation.', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Plotting the simulation setup', 'code': 'fig = plot_setup(\n  config=config,\n  objects=objects,\n)\nfig.savefig("empty_scene.png")', 'description': 'This example demonstrates how to use the `plot_setup` function to visualize the arrangement of objects within the simulation volume after they have been placed using `place_objects`.'}], 'url': None, 'error': False}, {'id': 1, 'docs_id': 1, 'type': 'class', 'name': 'UniformMaterial', 'description': 'Represents a uniform material in the simulation.', 'url': None, 'error': False}, {'id': 2, 'module_id': None, 'docs_id': 2, 'class_id': 1, 'name': 'place_relative_to', 'type': 'function', 'description': 'Places an object relative to another object.', 'signature': 'place_relative_to(volume, axes, own_positions, other_positions, margins, grid_margins)', 'parameters': [{'name': 'volume', 'type': None, 'docs_id': 3, 'description': 'The volume to place the object relative to.', 'default_value': None, 'is_optional': False}, {'name': 'axes', 'type': 'int', 'docs_id': 4, 'description': 'The axes to constrain.', 'default_value': None, 'is_optional': False}, {'name': 'own_positions', 'type': 'float', 'docs_id': 5, 'description': 'Relative position of the anchor point on the object (-1: left/bottom, 0: center, 1: right/top).', 'default_value': None, 'is_optional': False}, {'name': 'other_positions', 'type': 'float', 'docs_id': 6, 'description': 'Relative position of the anchor point on the other object.', 'default_value': None, 'is_optional': False}, {'name': 'margins', 'type': 'float', 'docs_id': 7, 'description': 'Fixed distance between anchor points in meters.', 'default_value': '0', 'is_optional': True}, {'name': 'grid_margins', 'type': 'int', 'docs_id': 8, 'description': 'Fixed distance between anchor points in grid cells.', 'default_value': '0', 'is_optional': True}], 'examples': [{'type': 'Placing substrate at the bottom', 'code': 'constraint = substrate.place_relative_to(\n  volume,\n  axes=2,\n  own_positions=-1,\n  other_positions=-1,\n  margins=0,\n  grid_margins=0\n)', 'description': 'This example places the substrate at the bottom of the simulation volume.'}], 'url': None, 'error': False}, {'id': 3, 'module_id': None, 'docs_id': 9, 'class_id': 1, 'name': 'place_above', 'type': 'function', 'description': 'Places an object above another object.', 'signature': 'place_above(other)', 'parameters': [{'name': 'other', 'type': 'UniformMaterial', 'docs_id': 10, 'description': 'The object to place the current object above.', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Placing cube above substrate', 'code': 'placement_constraints.append(\n  cube1.place_above(substrate)\n)', 'description': 'This example places cube1 above the substrate.'}], 'url': None, 'error': False}, {'id': 4, 'module_id': None, 'docs_id': 11, 'class_id': 1, 'name': 'place_at_center', 'type': 'function', 'description': 'Places an object at the center of another object.', 'signature': 'place_at_center(other, axes)', 'parameters': [{'name': 'other', 'type': 'UniformMaterial', 'docs_id': 12, 'description': 'The object to place the current object at the center of.', 'default_value': None, 'is_optional': False}, {'name': 'axes', 'type': 'tuple', 'docs_id': 13, 'description': 'The axes to center on.', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Centering cube on substrate', 'code': 'placement_constraints.append(\n  cube1.place_at_center(\n    substrate,\n    axes=(0, 1)\n  )\n)', 'description': 'This example centers cube1 on the substrate along the x and y axes.'}], 'url': None, 'error': False}, {'id': 5, 'module_id': None, 'docs_id': 14, 'class_id': 1, 'name': 'size_relative_to', 'type': 'function', 'description': 'Sets the size of an object relative to another object.', 'signature': 'size_relative_to(other, axes, other_axes, proportions)', 'parameters': [{'name': 'other', 'type': 'UniformMaterial', 'docs_id': 15, 'description': 'The object to base the size on.', 'default_value': None, 'is_optional': False}, {'name': 'axes', 'type': 'int', 'docs_id': 16, 'description': 'The axes of the current object to set the size for.', 'default_value': None, 'is_optional': False}, {'name': 'other_axes', 'type': 'int', 'docs_id': 17, 'description': 'The axes of the other object to base the size on.', 'default_value': None, 'is_optional': False}, {'name': 'proportions', 'type': 'float', 'docs_id': 18, 'description': "The proportion of the other object's size to use.", 'default_value': '1.0', 'is_optional': False}], 'examples': [{'type': "Setting cube2's y-size relative to cube1's z-size", 'code': 'placement_constraints.append(\n  cube2.size_relative_to(\n    cube1,\n    axes=1,\n    other_axes=2,\n    proportions=1.0\n  )\n)', 'description': 'This example sets the y-size of cube2 to be equal to the z-size of cube1.'}], 'url': None, 'error': False}, {'id': 6, 'module_id': None, 'docs_id': 19, 'class_id': 1, 'name': 'same_size', 'type': 'function', 'description': 'Sets the size of an object to be the same as another object.', 'signature': 'same_size(other, axes)', 'parameters': [{'name': 'other', 'type': 'UniformMaterial', 'docs_id': 20, 'description': 'The object to match the size of.', 'default_value': None, 'is_optional': False}, {'name': 'axes', 'type': 'tuple', 'docs_id': 21, 'description': 'The axes to match.', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Making object1 the same size as object2', 'code': 'object1.same_size(object2, axes=(0,1))', 'description': 'This example makes object1 the same size as object2 along the x and y axes.'}], 'url': None, 'error': False}, {'id': 7, 'module_id': None, 'docs_id': 22, 'class_id': 1, 'name': 'extend_to', 'type': 'function', 'description': 'Extends an object to another object.', 'signature': 'extend_to(other, axis, direction)', 'parameters': [{'name': 'other', 'type': 'UniformMaterial', 'docs_id': 23, 'description': 'The object to extend to.', 'default_value': None, 'is_optional': False}, {'name': 'axis', 'type': 'int', 'docs_id': 24, 'description': 'The axis to extend along.', 'default_value': None, 'is_optional': False}, {'name': 'direction', 'type': 'str', 'docs_id': 25, 'description': 'The direction to extend (+ or -).', 'default_value': None, 'is_optional': False}], 'examples': [{'type': 'Extending cube2 to cube1', 'code': "cube2.extend_to(\n    cube1,\n    axis=0,\n    direction='+'\n  )", 'description': 'This example extends cube2 along the x-axis to match the boundary of cube1.'}], 'url': None, 'error': False}]